
os_test_f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004584  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004744  08004744  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004744  08004744  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004744  08004744  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800474c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed0  2000000c  08004758  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000edc  08004758  00020edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ddb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3b  00000000  00000000  00036e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00039c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  0003b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eaaa  00000000  00000000  0003c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018437  00000000  00000000  0005af32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9eb0  00000000  00000000  00073369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057cc  00000000  00000000  0012d26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046f4 	.word	0x080046f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080046f4 	.word	0x080046f4

080001c8 <TaskS>:

/* USER CODE BEGIN PV */

int32_t TaskSdata=0;

void TaskS(void){ // producer as event thread every 10 ms
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  int i;
  int num = (TaskSdata%5)+1;
 80001ce:	4b13      	ldr	r3, [pc, #76]	; (800021c <TaskS+0x54>)
 80001d0:	6819      	ldr	r1, [r3, #0]
 80001d2:	4b13      	ldr	r3, [pc, #76]	; (8000220 <TaskS+0x58>)
 80001d4:	fb83 2301 	smull	r2, r3, r3, r1
 80001d8:	105a      	asrs	r2, r3, #1
 80001da:	17cb      	asrs	r3, r1, #31
 80001dc:	1ad2      	subs	r2, r2, r3
 80001de:	4613      	mov	r3, r2
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	4413      	add	r3, r2
 80001e4:	1aca      	subs	r2, r1, r3
 80001e6:	1c53      	adds	r3, r2, #1
 80001e8:	603b      	str	r3, [r7, #0]

  for(i=0; i<num; i++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e00c      	b.n	800020a <TaskS+0x42>
  {
    OS_FIFO_Put(TaskSdata);  // TaskT can proceed
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <TaskS+0x54>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f004 f9c5 	bl	8004584 <OS_FIFO_Put>
    TaskSdata++;
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <TaskS+0x54>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	3301      	adds	r3, #1
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <TaskS+0x54>)
 8000202:	6013      	str	r3, [r2, #0]
  for(i=0; i<num; i++)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	429a      	cmp	r2, r3
 8000210:	dbee      	blt.n	80001f0 <TaskS+0x28>
  }
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000028 	.word	0x20000028
 8000220:	66666667 	.word	0x66666667

08000224 <TaskT>:

int32_t TaskTexpected, TaskTactual, TaskTLostData;

void TaskT(void){ // consumer as main thread
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  TaskTexpected = 0;
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <TaskT+0x48>)
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
  TaskTLostData = 0;
 800022e:	4b10      	ldr	r3, [pc, #64]	; (8000270 <TaskT+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]

  while(1)
  {
    TaskTactual = OS_FIFO_Get();  // signaled by Task S
 8000234:	f004 f9dc 	bl	80045f0 <OS_FIFO_Get>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <TaskT+0x50>)
 800023e:	601a      	str	r2, [r3, #0]
    if(TaskTactual!= TaskTexpected)
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <TaskT+0x50>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <TaskT+0x48>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d009      	beq.n	8000260 <TaskT+0x3c>
    {
      TaskTLostData++;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <TaskT+0x4c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	4a07      	ldr	r2, [pc, #28]	; (8000270 <TaskT+0x4c>)
 8000254:	6013      	str	r3, [r2, #0]
      TaskTexpected = TaskTactual;
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <TaskT+0x50>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a04      	ldr	r2, [pc, #16]	; (800026c <TaskT+0x48>)
 800025c:	6013      	str	r3, [r2, #0]
 800025e:	e7e9      	b.n	8000234 <TaskT+0x10>
    }
    else
    {
      TaskTexpected++;
 8000260:	4b02      	ldr	r3, [pc, #8]	; (800026c <TaskT+0x48>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	4a01      	ldr	r2, [pc, #4]	; (800026c <TaskT+0x48>)
 8000268:	6013      	str	r3, [r2, #0]
    TaskTactual = OS_FIFO_Get();  // signaled by Task S
 800026a:	e7e3      	b.n	8000234 <TaskT+0x10>
 800026c:	200004c0 	.word	0x200004c0
 8000270:	20000098 	.word	0x20000098
 8000274:	20000040 	.word	0x20000040

08000278 <TaskU>:
}

int32_t CountU=0;
int32_t sUV;

void TaskU(void){ // event thread every 100 ms
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  CountU++;
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <TaskU+0x18>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	4a03      	ldr	r2, [pc, #12]	; (8000290 <TaskU+0x18>)
 8000284:	6013      	str	r3, [r2, #0]
  OS_Signal(&sUV);
 8000286:	4803      	ldr	r0, [pc, #12]	; (8000294 <TaskU+0x1c>)
 8000288:	f004 f938 	bl	80044fc <OS_Signal>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000002c 	.word	0x2000002c
 8000294:	20000090 	.word	0x20000090

08000298 <TaskV>:

int32_t CountV;

void TaskV(void){ // connected to TaskU
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  CountV = 0;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <TaskV+0x1c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]

  while(1)
  {
    OS_Wait(&sUV);
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <TaskV+0x20>)
 80002a4:	f004 f90a 	bl	80044bc <OS_Wait>
    CountV++;
 80002a8:	4b02      	ldr	r3, [pc, #8]	; (80002b4 <TaskV+0x1c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	4a01      	ldr	r2, [pc, #4]	; (80002b4 <TaskV+0x1c>)
 80002b0:	6013      	str	r3, [r2, #0]
    OS_Wait(&sUV);
 80002b2:	e7f6      	b.n	80002a2 <TaskV+0xa>
 80002b4:	20000038 	.word	0x20000038
 80002b8:	20000090 	.word	0x20000090

080002bc <TaskW>:
  }
}

int32_t CountW;

void TaskW(void){ // sleeping 30 ms
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  CountW = 0;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <TaskW+0x1c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
  while(1){
    CountW++;
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <TaskW+0x1c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3301      	adds	r3, #1
 80002cc:	4a02      	ldr	r2, [pc, #8]	; (80002d8 <TaskW+0x1c>)
 80002ce:	6013      	str	r3, [r2, #0]
    OS_Sleep(30);
 80002d0:	201e      	movs	r0, #30
 80002d2:	f004 f863 	bl	800439c <OS_Sleep>
    CountW++;
 80002d6:	e7f6      	b.n	80002c6 <TaskW+0xa>
 80002d8:	20000034 	.word	0x20000034

080002dc <TaskX>:
  }
}

int32_t CountX;

void TaskX(void){ // sleeping 40 ms
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  CountX = 0;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <TaskX+0x1c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
  while(1){
    CountX++;
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <TaskX+0x1c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	3301      	adds	r3, #1
 80002ec:	4a02      	ldr	r2, [pc, #8]	; (80002f8 <TaskX+0x1c>)
 80002ee:	6013      	str	r3, [r2, #0]
    OS_Sleep(40);
 80002f0:	2028      	movs	r0, #40	; 0x28
 80002f2:	f004 f853 	bl	800439c <OS_Sleep>
    CountX++;
 80002f6:	e7f6      	b.n	80002e6 <TaskX+0xa>
 80002f8:	20000094 	.word	0x20000094

080002fc <TaskY>:
  }
}

int32_t CountY;

void TaskY(void){ // sleeping 50 ms
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  CountY = 0;
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <TaskY+0x1c>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
  while(1){
    CountY++;
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <TaskY+0x1c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	4a02      	ldr	r2, [pc, #8]	; (8000318 <TaskY+0x1c>)
 800030e:	6013      	str	r3, [r2, #0]
    OS_Sleep(50);
 8000310:	2032      	movs	r0, #50	; 0x32
 8000312:	f004 f843 	bl	800439c <OS_Sleep>
    CountY++;
 8000316:	e7f6      	b.n	8000306 <TaskY+0xa>
 8000318:	2000009c 	.word	0x2000009c

0800031c <TaskZ>:
  }
}

int32_t CountZ;

void TaskZ(void){ // dummy
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  CountZ = 0;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <TaskZ+0x18>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
  while(1){
    CountZ++;
 8000326:	4b03      	ldr	r3, [pc, #12]	; (8000334 <TaskZ+0x18>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	4a01      	ldr	r2, [pc, #4]	; (8000334 <TaskZ+0x18>)
 800032e:	6013      	str	r3, [r2, #0]
 8000330:	e7f9      	b.n	8000326 <TaskZ+0xa>
 8000332:	bf00      	nop
 8000334:	2000003c 	.word	0x2000003c

08000338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033e:	f000 fc03 	bl	8000b48 <HAL_Init>

  /* USER CODE BEGIN Init */
  OS_Init();
 8000342:	f003 fe5b 	bl	8003ffc <OS_Init>
  OS_FIFO_Init();
 8000346:	f004 f903 	bl	8004550 <OS_FIFO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f847 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f000 f99d 	bl	800068c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000352:	f000 f8a5 	bl	80004a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000356:	f000 f8e3 	bl	8000520 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800035a:	f000 f975 	bl	8000648 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 800035e:	f000 f943 	bl	80005e8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000362:	f000 f91b 	bl	800059c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000366:	4811      	ldr	r0, [pc, #68]	; (80003ac <main+0x74>)
 8000368:	f002 fd4e 	bl	8002e08 <HAL_TIM_Base_Start_IT>

  OS_InitSemaphore(&sUV, 0);
 800036c:	2100      	movs	r1, #0
 800036e:	4810      	ldr	r0, [pc, #64]	; (80003b0 <main+0x78>)
 8000370:	f004 f896 	bl	80044a0 <OS_InitSemaphore>

  OS_AddThreads(&TaskT, &TaskV, &TaskW, &TaskX, &TaskY, &TaskZ);
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <main+0x7c>)
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <main+0x80>)
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <main+0x84>)
 800037e:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <main+0x88>)
 8000380:	4910      	ldr	r1, [pc, #64]	; (80003c4 <main+0x8c>)
 8000382:	4811      	ldr	r0, [pc, #68]	; (80003c8 <main+0x90>)
 8000384:	f003 ff14 	bl	80041b0 <OS_AddThreads>
  OS_AddPeriodicEventThread(&TaskS, 10);
 8000388:	210a      	movs	r1, #10
 800038a:	4810      	ldr	r0, [pc, #64]	; (80003cc <main+0x94>)
 800038c:	f003 ff80 	bl	8004290 <OS_AddPeriodicEventThread>
  OS_AddPeriodicEventThread(&TaskU, 100);
 8000390:	2164      	movs	r1, #100	; 0x64
 8000392:	480f      	ldr	r0, [pc, #60]	; (80003d0 <main+0x98>)
 8000394:	f003 ff7c 	bl	8004290 <OS_AddPeriodicEventThread>

  OS_Launch(SystemCoreClock / 1000U);
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <main+0x9c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <main+0xa0>)
 800039e:	fba2 2303 	umull	r2, r3, r2, r3
 80003a2:	099b      	lsrs	r3, r3, #6
 80003a4:	4618      	mov	r0, r3
 80003a6:	f003 ffb9 	bl	800431c <OS_Launch>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <main+0x72>
 80003ac:	20000474 	.word	0x20000474
 80003b0:	20000090 	.word	0x20000090
 80003b4:	0800031d 	.word	0x0800031d
 80003b8:	080002fd 	.word	0x080002fd
 80003bc:	080002dd 	.word	0x080002dd
 80003c0:	080002bd 	.word	0x080002bd
 80003c4:	08000299 	.word	0x08000299
 80003c8:	08000225 	.word	0x08000225
 80003cc:	080001c9 	.word	0x080001c9
 80003d0:	08000279 	.word	0x08000279
 80003d4:	20000000 	.word	0x20000000
 80003d8:	10624dd3 	.word	0x10624dd3

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b09e      	sub	sp, #120	; 0x78
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003e6:	2228      	movs	r2, #40	; 0x28
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f004 f97a 	bl	80046e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000400:	463b      	mov	r3, r7
 8000402:	223c      	movs	r2, #60	; 0x3c
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f004 f96c 	bl	80046e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800040c:	2303      	movs	r3, #3
 800040e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000410:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000414:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041a:	2301      	movs	r3, #1
 800041c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041e:	2310      	movs	r3, #16
 8000420:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000422:	2302      	movs	r3, #2
 8000424:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800042c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000430:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000436:	4618      	mov	r0, r3
 8000438:	f001 f8f6 	bl	8001628 <HAL_RCC_OscConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000442:	f000 f9a3 	bl	800078c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	230f      	movs	r3, #15
 8000448:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2302      	movs	r3, #2
 800044c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000460:	2102      	movs	r1, #2
 8000462:	4618      	mov	r0, r3
 8000464:	f001 ffe8 	bl	8002438 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800046e:	f000 f98d 	bl	800078c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <SystemClock_Config+0xc0>)
 8000474:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800047e:	2300      	movs	r3, #0
 8000480:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	463b      	mov	r3, r7
 8000484:	4618      	mov	r0, r3
 8000486:	f002 fa0d 	bl	80028a4 <HAL_RCCEx_PeriphCLKConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000490:	f000 f97c 	bl	800078c <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3778      	adds	r7, #120	; 0x78
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	00020022 	.word	0x00020022

080004a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_I2C1_Init+0x74>)
 80004a6:	4a1c      	ldr	r2, [pc, #112]	; (8000518 <MX_I2C1_Init+0x78>)
 80004a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004aa:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <MX_I2C1_Init+0x74>)
 80004ac:	4a1b      	ldr	r2, [pc, #108]	; (800051c <MX_I2C1_Init+0x7c>)
 80004ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_I2C1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <MX_I2C1_Init+0x74>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_I2C1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_I2C1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_I2C1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_I2C1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_I2C1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004da:	480e      	ldr	r0, [pc, #56]	; (8000514 <MX_I2C1_Init+0x74>)
 80004dc:	f000 fea0 	bl	8001220 <HAL_I2C_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004e6:	f000 f951 	bl	800078c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <MX_I2C1_Init+0x74>)
 80004ee:	f000 ff26 	bl	800133e <HAL_I2CEx_ConfigAnalogFilter>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004f8:	f000 f948 	bl	800078c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004fc:	2100      	movs	r1, #0
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_I2C1_Init+0x74>)
 8000500:	f000 ff68 	bl	80013d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800050a:	f000 f93f 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000044 	.word	0x20000044
 8000518:	40005400 	.word	0x40005400
 800051c:	2000090e 	.word	0x2000090e

08000520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_SPI1_Init+0x74>)
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <MX_SPI1_Init+0x78>)
 8000528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_SPI1_Init+0x74>)
 800052c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_SPI1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_SPI1_Init+0x74>)
 800053a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800053e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_SPI1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_SPI1_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_SPI1_Init+0x74>)
 800054e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000552:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_SPI1_Init+0x74>)
 8000556:	2208      	movs	r2, #8
 8000558:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_SPI1_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_SPI1_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_SPI1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_SPI1_Init+0x74>)
 800056e:	2207      	movs	r2, #7
 8000570:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_SPI1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_SPI1_Init+0x74>)
 800057a:	2208      	movs	r2, #8
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_SPI1_Init+0x74>)
 8000580:	f002 fb40 	bl	8002c04 <HAL_SPI_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800058a:	f000 f8ff 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000a0 	.word	0x200000a0
 8000598:	40013000 	.word	0x40013000

0800059c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_TIM16_Init+0x44>)
 80005a2:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <MX_TIM16_Init+0x48>)
 80005a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7200 - 1;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_TIM16_Init+0x44>)
 80005a8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80005ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_TIM16_Init+0x44>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10 - 1;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_TIM16_Init+0x44>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_TIM16_Init+0x44>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_TIM16_Init+0x44>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_TIM16_Init+0x44>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_TIM16_Init+0x44>)
 80005ce:	f002 fbc4 	bl	8002d5a <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80005d8:	f000 f8d8 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000474 	.word	0x20000474
 80005e4:	40014400 	.word	0x40014400

080005e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <MX_USART2_UART_Init+0x5c>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800062c:	f002 fe4c 	bl	80032c8 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 f8a9 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000104 	.word	0x20000104
 8000644:	40004400 	.word	0x40004400

08000648 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <MX_USB_PCD_Init+0x40>)
 8000650:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 8000654:	2208      	movs	r2, #8
 8000656:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 800065a:	2202      	movs	r2, #2
 800065c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 8000660:	2202      	movs	r2, #2
 8000662:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 8000672:	f000 fefb 	bl	800146c <HAL_PCD_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800067c:	f000 f886 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000188 	.word	0x20000188
 8000688:	40005c00 	.word	0x40005c00

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a36      	ldr	r2, [pc, #216]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b34      	ldr	r3, [pc, #208]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a30      	ldr	r2, [pc, #192]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a2a      	ldr	r2, [pc, #168]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_GPIO_Init+0xf4>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xf4>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <MX_GPIO_Init+0xf4>)
 8000708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_GPIO_Init+0xf4>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800071a:	2200      	movs	r2, #0
 800071c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000720:	4818      	ldr	r0, [pc, #96]	; (8000784 <MX_GPIO_Init+0xf8>)
 8000722:	f000 fd65 	bl	80011f0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000726:	2337      	movs	r3, #55	; 0x37
 8000728:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_GPIO_Init+0xfc>)
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_GPIO_Init+0xf8>)
 800073a:	f000 fbdf 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800073e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000742:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_GPIO_Init+0xf8>)
 8000758:	f000 fbd0 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fbc3 	bl	8000efc <HAL_GPIO_Init>

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	48001000 	.word	0x48001000
 8000788:	10120000 	.word	0x10120000

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x44>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_MspInit+0x44>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_MspInit+0x44>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_MspInit+0x44>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_MspInit+0x44>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_MspInit+0x44>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007d2:	2007      	movs	r0, #7
 80007d4:	f000 fada 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_I2C_MspInit+0x7c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d127      	bne.n	8000856 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <HAL_I2C_MspInit+0x80>)
 800080c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800081e:	23c0      	movs	r3, #192	; 0xc0
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000822:	2312      	movs	r3, #18
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082e:	2304      	movs	r3, #4
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <HAL_I2C_MspInit+0x84>)
 800083a:	f000 fb5f 	bl	8000efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x80>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40021000 	.word	0x40021000
 8000868:	48000400 	.word	0x48000400

0800086c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_SPI_MspInit+0x7c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d128      	bne.n	80008e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_SPI_MspInit+0x80>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_SPI_MspInit+0x80>)
 8000894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_SPI_MspInit+0x80>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_SPI_MspInit+0x80>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80008be:	23e0      	movs	r3, #224	; 0xe0
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ce:	2305      	movs	r3, #5
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 fb0e 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <HAL_TIM_Base_MspInit+0x44>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d113      	bne.n	800092a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_TIM_Base_MspInit+0x48>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <HAL_TIM_Base_MspInit+0x48>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_TIM_Base_MspInit+0x48>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2019      	movs	r0, #25
 8000920:	f000 fa3f 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000924:	2019      	movs	r0, #25
 8000926:	f000 fa58 	bl	8000dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40014400 	.word	0x40014400
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <HAL_UART_MspInit+0x8c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d130      	bne.n	80009c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_UART_MspInit+0x90>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a1a      	ldr	r2, [pc, #104]	; (80009cc <HAL_UART_MspInit+0x90>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_UART_MspInit+0x90>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_UART_MspInit+0x90>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <HAL_UART_MspInit+0x90>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6153      	str	r3, [r2, #20]
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_UART_MspInit+0x90>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098e:	230c      	movs	r3, #12
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099e:	2307      	movs	r3, #7
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 faa6 	bl	8000efc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2026      	movs	r0, #38	; 0x26
 80009b6:	f000 f9f4 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ba:	2026      	movs	r0, #38	; 0x26
 80009bc:	f000 fa0d 	bl	8000dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <HAL_PCD_MspInit+0x80>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d129      	bne.n	8000a46 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_PCD_MspInit+0x84>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_PCD_MspInit+0x84>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_PCD_MspInit+0x84>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a1c:	230e      	movs	r3, #14
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f000 fa67 	bl	8000efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_PCD_MspInit+0x84>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_PCD_MspInit+0x84>)
 8000a34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_PCD_MspInit+0x84>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40005c00 	.word	0x40005c00
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000aae:	f002 fa15 	bl	8002edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000474 	.word	0x20000474

08000abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <USART2_IRQHandler+0x10>)
 8000ac2:	f002 fc4f 	bl	8003364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000104 	.word	0x20000104

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afa:	490e      	ldr	r1, [pc, #56]	; (8000b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <LoopForever+0xe>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b10:	4c0b      	ldr	r4, [pc, #44]	; (8000b40 <LoopForever+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b1e:	f7ff ffd7 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f003 fdbb 	bl	800469c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fc07 	bl	8000338 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b2c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b38:	0800474c 	.word	0x0800474c
  ldr r2, =_sbss
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b40:	20000edc 	.word	0x20000edc

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x28>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x28>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f917 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f808 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fe1a 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f92f 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f8f7 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200004c4 	.word	0x200004c4

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff8e 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff29 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff3e 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff8e 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5d 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff31 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffa2 	bl	8000d48 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d008      	beq.n	8000e32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2204      	movs	r2, #4
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e020      	b.n	8000e74 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 020e 	bic.w	r2, r2, #14
 8000e40:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d005      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2204      	movs	r2, #4
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e027      	b.n	8000ef2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 020e 	bic.w	r2, r2, #14
 8000eb0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0201 	bic.w	r2, r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	4798      	blx	r3
    } 
  }
  return status;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e154      	b.n	80011b6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8146 	beq.w	80011b0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d00b      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f38:	2b11      	cmp	r3, #17
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b12      	cmp	r3, #18
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0xea>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0203 	and.w	r2, r3, #3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80a0 	beq.w	80011b0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b58      	ldr	r3, [pc, #352]	; (80011d4 <HAL_GPIO_Init+0x2d8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a57      	ldr	r2, [pc, #348]	; (80011d4 <HAL_GPIO_Init+0x2d8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b55      	ldr	r3, [pc, #340]	; (80011d4 <HAL_GPIO_Init+0x2d8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001088:	4a53      	ldr	r2, [pc, #332]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010b2:	d019      	beq.n	80010e8 <HAL_GPIO_Init+0x1ec>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a49      	ldr	r2, [pc, #292]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d013      	beq.n	80010e4 <HAL_GPIO_Init+0x1e8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a48      	ldr	r2, [pc, #288]	; (80011e0 <HAL_GPIO_Init+0x2e4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d00d      	beq.n	80010e0 <HAL_GPIO_Init+0x1e4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a47      	ldr	r2, [pc, #284]	; (80011e4 <HAL_GPIO_Init+0x2e8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_Init+0x1e0>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <HAL_GPIO_Init+0x2ec>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_GPIO_Init+0x1dc>
 80010d4:	2304      	movs	r3, #4
 80010d6:	e008      	b.n	80010ea <HAL_GPIO_Init+0x1ee>
 80010d8:	2305      	movs	r3, #5
 80010da:	e006      	b.n	80010ea <HAL_GPIO_Init+0x1ee>
 80010dc:	2303      	movs	r3, #3
 80010de:	e004      	b.n	80010ea <HAL_GPIO_Init+0x1ee>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e002      	b.n	80010ea <HAL_GPIO_Init+0x1ee>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_GPIO_Init+0x1ee>
 80010e8:	2300      	movs	r3, #0
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	f002 0203 	and.w	r2, r2, #3
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	4093      	lsls	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010fa:	4937      	ldr	r1, [pc, #220]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001108:	4b38      	ldr	r3, [pc, #224]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800112c:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f47f aea3 	bne.w	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000
 80011dc:	48000400 	.word	0x48000400
 80011e0:	48000800 	.word	0x48000800
 80011e4:	48000c00 	.word	0x48000c00
 80011e8:	48001000 	.word	0x48001000
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800120c:	e002      	b.n	8001214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e081      	b.n	8001336 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff facc 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2224      	movs	r2, #36	; 0x24
 8001250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d107      	bne.n	800129a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e006      	b.n	80012a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d104      	bne.n	80012ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	ea42 0103 	orr.w	r1, r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	021a      	lsls	r2, r3, #8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69d9      	ldr	r1, [r3, #28]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1a      	ldr	r2, [r3, #32]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2220      	movs	r2, #32
 8001322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b20      	cmp	r3, #32
 8001352:	d138      	bne.n	80013c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800135e:	2302      	movs	r3, #2
 8001360:	e032      	b.n	80013c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2224      	movs	r2, #36	; 0x24
 800136e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001390:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6819      	ldr	r1, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2220      	movs	r2, #32
 80013b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013c6:	2302      	movs	r3, #2
  }
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d139      	bne.n	800145e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e033      	b.n	8001460 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2224      	movs	r2, #36	; 0x24
 8001404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001426:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 0201 	orr.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2220      	movs	r2, #32
 800144e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800145e:	2302      	movs	r3, #2
  }
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	af06      	add	r7, sp, #24
 8001472:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0d0      	b.n	8001620 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fa9c 	bl	80009d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fd20 	bl	8003eea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e04c      	b.n	800154a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3301      	adds	r3, #1
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	b298      	uxth	r0, r3
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	440b      	add	r3, r1
 80014ec:	3336      	adds	r3, #54	; 0x36
 80014ee:	4602      	mov	r2, r0
 80014f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	3303      	adds	r3, #3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	3338      	adds	r3, #56	; 0x38
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	333c      	adds	r3, #60	; 0x3c
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	3340      	adds	r3, #64	; 0x40
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	3301      	adds	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3ad      	bcc.n	80014b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e044      	b.n	80015e4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	f203 1369 	addw	r3, r3, #361	; 0x169
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3b5      	bcc.n	800155a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	687e      	ldr	r6, [r7, #4]
 80015f6:	466d      	mov	r5, sp
 80015f8:	f106 0410 	add.w	r4, r6, #16
 80015fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	602b      	str	r3, [r5, #0]
 8001604:	1d33      	adds	r3, r6, #4
 8001606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f002 fc89 	bl	8003f20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800162e:	af00      	add	r7, sp, #0
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	f000 bef4 	b.w	800242a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 816a 	beq.w	8001926 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001652:	4bb3      	ldr	r3, [pc, #716]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00c      	beq.n	8001678 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800165e:	4bb0      	ldr	r3, [pc, #704]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d159      	bne.n	800171e <HAL_RCC_OscConfig+0xf6>
 800166a:	4bad      	ldr	r3, [pc, #692]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001676:	d152      	bne.n	800171e <HAL_RCC_OscConfig+0xf6>
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800168c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_OscConfig+0x82>
 80016a4:	4b9e      	ldr	r3, [pc, #632]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0xae>
 80016aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016d2:	4b93      	ldr	r3, [pc, #588]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016e2:	fa92 f2a2 	rbit	r2, r2
 80016e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	f002 021f 	and.w	r2, r2, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 810c 	beq.w	8001924 <HAL_RCC_OscConfig+0x2fc>
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 8106 	bne.w	8001924 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	f000 be86 	b.w	800242a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x110>
 800172a:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7c      	ldr	r2, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e030      	b.n	800179a <HAL_RCC_OscConfig+0x172>
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x134>
 8001742:	4b77      	ldr	r3, [pc, #476]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a76      	ldr	r2, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b74      	ldr	r3, [pc, #464]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a73      	ldr	r2, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e01e      	b.n	800179a <HAL_RCC_OscConfig+0x172>
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x15a>
 8001768:	4b6d      	ldr	r3, [pc, #436]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6c      	ldr	r2, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 800176e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a69      	ldr	r2, [pc, #420]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x172>
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a66      	ldr	r2, [pc, #408]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a63      	ldr	r2, [pc, #396]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800179a:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	f023 020f 	bic.w	r2, r3, #15
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	495d      	ldr	r1, [pc, #372]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d059      	beq.n	800186c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fa0c 	bl	8000bd4 <HAL_GetTick>
 80017bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c2:	f7ff fa07 	bl	8000bd4 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d902      	bls.n	80017d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	f000 be29 	b.w	800242a <HAL_RCC_OscConfig+0xe02>
 80017d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <HAL_RCC_OscConfig+0x1e2>
 8001804:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0x20e>
 800180a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800181e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001822:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001826:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800183e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001842:	fa92 f2a2 	rbit	r2, r2
 8001846:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800184a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800184e:	fab2 f282 	clz	r2, r2
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f042 0220 	orr.w	r2, r2, #32
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f002 021f 	and.w	r2, r2, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0ab      	beq.n	80017c2 <HAL_RCC_OscConfig+0x19a>
 800186a:	e05c      	b.n	8001926 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff f9b2 	bl	8000bd4 <HAL_GetTick>
 8001870:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001874:	e00a      	b.n	800188c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001876:	f7ff f9ad 	bl	8000bd4 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d902      	bls.n	800188c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	f000 bdcf 	b.w	800242a <HAL_RCC_OscConfig+0xe02>
 800188c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001890:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0x296>
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x2c2>
 80018be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_RCC_OscConfig+0x2f8>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018f6:	fa92 f2a2 	rbit	r2, r2
 80018fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f042 0220 	orr.w	r2, r2, #32
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ab      	bne.n	8001876 <HAL_RCC_OscConfig+0x24e>
 800191e:	e002      	b.n	8001926 <HAL_RCC_OscConfig+0x2fe>
 8001920:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 816f 	beq.w	8001c14 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001936:	4bd0      	ldr	r3, [pc, #832]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001942:	4bcd      	ldr	r3, [pc, #820]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d16c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x400>
 800194e:	4bca      	ldr	r3, [pc, #808]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d166      	bne.n	8001a28 <HAL_RCC_OscConfig+0x400>
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800196c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x362>
 8001984:	4bbc      	ldr	r3, [pc, #752]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e013      	b.n	80019b2 <HAL_RCC_OscConfig+0x38a>
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019ae:	4bb2      	ldr	r3, [pc, #712]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	2202      	movs	r2, #2
 80019b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019bc:	fa92 f2a2 	rbit	r2, r2
 80019c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f042 0220 	orr.w	r2, r2, #32
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f002 021f 	and.w	r2, r2, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_RCC_OscConfig+0x3cc>
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f000 bd1b 	b.w	800242a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4ba0      	ldr	r3, [pc, #640]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	21f8      	movs	r1, #248	; 0xf8
 8001a04:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a0c:	fa91 f1a1 	rbit	r1, r1
 8001a10:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a14:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a18:	fab1 f181 	clz	r1, r1
 8001a1c:	b2c9      	uxtb	r1, r1
 8001a1e:	408b      	lsls	r3, r1
 8001a20:	4995      	ldr	r1, [pc, #596]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	e0f5      	b.n	8001c14 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8085 	beq.w	8001b3e <HAL_RCC_OscConfig+0x516>
 8001a34:	2301      	movs	r3, #1
 8001a36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f8b8 	bl	8000bd4 <HAL_GetTick>
 8001a64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f8b3 	bl	8000bd4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f000 bcd5 	b.w	800242a <HAL_RCC_OscConfig+0xe02>
 8001a80:	2302      	movs	r3, #2
 8001a82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a92:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x488>
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	e013      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4b0>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ac8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	2202      	movs	r2, #2
 8001ada:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ade:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ae2:	fa92 f2a2 	rbit	r2, r2
 8001ae6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001aea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001aee:	fab2 f282 	clz	r2, r2
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f042 0220 	orr.w	r2, r2, #32
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f002 021f 	and.w	r2, r2, #31
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0af      	beq.n	8001a6a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	21f8      	movs	r1, #248	; 0xf8
 8001b1a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b22:	fa91 f1a1 	rbit	r1, r1
 8001b26:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b2a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b2e:	fab1 f181 	clz	r1, r1
 8001b32:	b2c9      	uxtb	r1, r1
 8001b34:	408b      	lsls	r3, r1
 8001b36:	4950      	ldr	r1, [pc, #320]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e06a      	b.n	8001c14 <HAL_RCC_OscConfig+0x5ec>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	461a      	mov	r2, r3
 8001b66:	2300      	movs	r3, #0
 8001b68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f833 	bl	8000bd4 <HAL_GetTick>
 8001b6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff f82e 	bl	8000bd4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d902      	bls.n	8001b8a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f000 bc50 	b.w	800242a <HAL_RCC_OscConfig+0xe02>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_RCC_OscConfig+0x592>
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	e013      	b.n	8001be2 <HAL_RCC_OscConfig+0x5ba>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bcc:	2302      	movs	r3, #2
 8001bce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_RCC_OscConfig+0x650>)
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	2202      	movs	r2, #2
 8001be4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001be8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bec:	fa92 f2a2 	rbit	r2, r2
 8001bf0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bf4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1af      	bne.n	8001b74 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80da 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d069      	beq.n	8001d02 <HAL_RCC_OscConfig+0x6da>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x654>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	461a      	mov	r2, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7fe ffbc 	bl	8000bd4 <HAL_GetTick>
 8001c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c60:	e00e      	b.n	8001c80 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c62:	f7fe ffb7 	bl	8000bd4 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d906      	bls.n	8001c80 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e3d9      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	10908120 	.word	0x10908120
 8001c80:	2302      	movs	r3, #2
 8001c82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c96:	2202      	movs	r2, #2
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cae:	2202      	movs	r2, #2
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	4ba5      	ldr	r3, [pc, #660]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cca:	2102      	movs	r1, #2
 8001ccc:	6019      	str	r1, [r3, #0]
 8001cce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f1a3 	rbit	r1, r3
 8001cd8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cdc:	6019      	str	r1, [r3, #0]
  return result;
 8001cde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0b0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x63a>
 8001d00:	e06a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7b0>
 8001d02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fa93 f2a3 	rbit	r2, r3
 8001d14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d18:	601a      	str	r2, [r3, #0]
  return result;
 8001d1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d1e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7fe ff4e 	bl	8000bd4 <HAL_GetTick>
 8001d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7fe ff49 	bl	8000bd4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e36b      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
 8001d52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d56:	2202      	movs	r2, #2
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d6e:	2202      	movs	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d86:	2202      	movs	r2, #2
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9a:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001da2:	2102      	movs	r1, #2
 8001da4:	6019      	str	r1, [r3, #0]
 8001da6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f1a3 	rbit	r1, r3
 8001db0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001db4:	6019      	str	r1, [r3, #0]
  return result;
 8001db6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1b2      	bne.n	8001d3e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8158 	beq.w	8002098 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b5a      	ldr	r3, [pc, #360]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d112      	bne.n	8001e20 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a56      	ldr	r2, [pc, #344]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b54      	ldr	r3, [pc, #336]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <HAL_RCC_OscConfig+0x938>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d11a      	bne.n	8001e62 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x938>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_RCC_OscConfig+0x938>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e38:	f7fe fecc 	bl	8000bd4 <HAL_GetTick>
 8001e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7fe fec7 	bl	8000bd4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e2e9      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <HAL_RCC_OscConfig+0x938>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0ef      	beq.n	8001e42 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x852>
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a39      	ldr	r2, [pc, #228]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e02f      	b.n	8001eda <HAL_RCC_OscConfig+0x8b2>
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x876>
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a33      	ldr	r2, [pc, #204]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a30      	ldr	r2, [pc, #192]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001e96:	f023 0304 	bic.w	r3, r3, #4
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	e01d      	b.n	8001eda <HAL_RCC_OscConfig+0x8b2>
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x89a>
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x8b2>
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d06b      	beq.n	8001fbc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7fe fe76 	bl	8000bd4 <HAL_GetTick>
 8001ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7fe fe71 	bl	8000bd4 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e291      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
 8001f06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f22:	2202      	movs	r2, #2
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fa93 f2a3 	rbit	r2, r3
 8001f30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f34:	601a      	str	r2, [r3, #0]
  return result;
 8001f36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d109      	bne.n	8001f64 <HAL_RCC_OscConfig+0x93c>
 8001f50:	4b01      	ldr	r3, [pc, #4]	; (8001f58 <HAL_RCC_OscConfig+0x930>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x958>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	10908120 	.word	0x10908120
 8001f60:	40007000 	.word	0x40007000
 8001f64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f68:	2202      	movs	r2, #2
 8001f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	4bbb      	ldr	r3, [pc, #748]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f84:	2102      	movs	r1, #2
 8001f86:	6011      	str	r1, [r2, #0]
 8001f88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	fa92 f1a2 	rbit	r1, r2
 8001f92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f96:	6011      	str	r1, [r2, #0]
  return result;
 8001f98:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	fab2 f282 	clz	r2, r2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f002 021f 	and.w	r2, r2, #31
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d099      	beq.n	8001eee <HAL_RCC_OscConfig+0x8c6>
 8001fba:	e063      	b.n	8002084 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7fe fe0a 	bl	8000bd4 <HAL_GetTick>
 8001fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	e00b      	b.n	8001fde <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fe05 	bl	8000bd4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e225      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
 8001fde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	fa93 f2a3 	rbit	r2, r3
 8001ff0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800200c:	601a      	str	r2, [r3, #0]
  return result;
 800200e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002012:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d102      	bne.n	800202e <HAL_RCC_OscConfig+0xa06>
 8002028:	4b90      	ldr	r3, [pc, #576]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	e00d      	b.n	800204a <HAL_RCC_OscConfig+0xa22>
 800202e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	4b89      	ldr	r3, [pc, #548]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800204e:	2102      	movs	r1, #2
 8002050:	6011      	str	r1, [r2, #0]
 8002052:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	fa92 f1a2 	rbit	r1, r2
 800205c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002060:	6011      	str	r1, [r2, #0]
  return result;
 8002062:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	fab2 f282 	clz	r2, r2
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f002 021f 	and.w	r2, r2, #31
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1a0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002084:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b77      	ldr	r3, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a76      	ldr	r2, [pc, #472]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002096:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 81c2 	beq.w	8002428 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a4:	4b71      	ldr	r3, [pc, #452]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	f000 819c 	beq.w	80023ea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	f040 8114 	bne.w	80022e6 <HAL_RCC_OscConfig+0xcbe>
 80020be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020d6:	601a      	str	r2, [r3, #0]
  return result;
 80020d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	461a      	mov	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe fd6e 	bl	8000bd4 <HAL_GetTick>
 80020f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe fd69 	bl	8000bd4 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e18b      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
 8002112:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800212a:	601a      	str	r2, [r3, #0]
  return result;
 800212c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_RCC_OscConfig+0xb24>
 8002146:	4b49      	ldr	r3, [pc, #292]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	e01b      	b.n	8002184 <HAL_RCC_OscConfig+0xb5c>
 800214c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800216a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fa93 f2a3 	rbit	r2, r3
 800217a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800218c:	6011      	str	r1, [r2, #0]
 800218e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fa92 f1a2 	rbit	r1, r2
 8002198:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800219c:	6011      	str	r1, [r2, #0]
  return result;
 800219e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f042 0220 	orr.w	r2, r2, #32
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f002 021f 	and.w	r2, r2, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d19e      	bne.n	80020fe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c0:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	4925      	ldr	r1, [pc, #148]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
 80021dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021f4:	601a      	str	r2, [r3, #0]
  return result;
 80021f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002206:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	461a      	mov	r2, r3
 800220e:	2301      	movs	r3, #1
 8002210:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fcdf 	bl	8000bd4 <HAL_GetTick>
 8002216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221a:	e009      	b.n	8002230 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe fcda 	bl	8000bd4 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0fc      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
 8002230:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002248:	601a      	str	r2, [r3, #0]
  return result;
 800224a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800224e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_RCC_OscConfig+0xc48>
 8002264:	4b01      	ldr	r3, [pc, #4]	; (800226c <HAL_RCC_OscConfig+0xc44>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	e01e      	b.n	80022a8 <HAL_RCC_OscConfig+0xc80>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800228e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_OscConfig+0xe0c>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022b0:	6011      	str	r1, [r2, #0]
 80022b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	fa92 f1a2 	rbit	r1, r2
 80022bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022c0:	6011      	str	r1, [r2, #0]
  return result;
 80022c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	f042 0220 	orr.w	r2, r2, #32
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f002 021f 	and.w	r2, r2, #31
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d09b      	beq.n	800221c <HAL_RCC_OscConfig+0xbf4>
 80022e4:	e0a0      	b.n	8002428 <HAL_RCC_OscConfig+0xe00>
 80022e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fe:	601a      	str	r2, [r3, #0]
  return result;
 8002300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002304:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	461a      	mov	r2, r3
 8002318:	2300      	movs	r3, #0
 800231a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fc5a 	bl	8000bd4 <HAL_GetTick>
 8002320:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002324:	e009      	b.n	800233a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe fc55 	bl	8000bd4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e077      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
 800233a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002358:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_RCC_OscConfig+0xd4c>
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_OscConfig+0xe0c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	e01b      	b.n	80023ac <HAL_RCC_OscConfig+0xd84>
 8002374:	f107 0320 	add.w	r3, r7, #32
 8002378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f107 0320 	add.w	r3, r7, #32
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f107 0318 	add.w	r3, r7, #24
 8002392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f107 0318 	add.w	r3, r7, #24
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_RCC_OscConfig+0xe0c>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	f107 0210 	add.w	r2, r7, #16
 80023b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023b4:	6011      	str	r1, [r2, #0]
 80023b6:	f107 0210 	add.w	r2, r7, #16
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fa92 f1a2 	rbit	r1, r2
 80023c0:	f107 020c 	add.w	r2, r7, #12
 80023c4:	6011      	str	r1, [r2, #0]
  return result;
 80023c6:	f107 020c 	add.w	r2, r7, #12
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f002 021f 	and.w	r2, r2, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d19e      	bne.n	8002326 <HAL_RCC_OscConfig+0xcfe>
 80023e8:	e01e      	b.n	8002428 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e018      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_RCC_OscConfig+0xe0c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002400:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	429a      	cmp	r2, r3
 8002410:	d108      	bne.n	8002424 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002412:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002416:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b09e      	sub	sp, #120	; 0x78
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e162      	b.n	8002716 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b90      	ldr	r3, [pc, #576]	; (8002694 <HAL_RCC_ClockConfig+0x25c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d910      	bls.n	8002480 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <HAL_RCC_ClockConfig+0x25c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0207 	bic.w	r2, r3, #7
 8002466:	498b      	ldr	r1, [pc, #556]	; (8002694 <HAL_RCC_ClockConfig+0x25c>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <HAL_RCC_ClockConfig+0x25c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e14a      	b.n	8002716 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248c:	4b82      	ldr	r3, [pc, #520]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	497f      	ldr	r1, [pc, #508]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80dc 	beq.w	8002664 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d13c      	bne.n	800252e <HAL_RCC_ClockConfig+0xf6>
 80024b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d102      	bne.n	80024de <HAL_RCC_ClockConfig+0xa6>
 80024d8:	4b6f      	ldr	r3, [pc, #444]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	e00f      	b.n	80024fe <HAL_RCC_ClockConfig+0xc6>
 80024de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	667b      	str	r3, [r7, #100]	; 0x64
 80024ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f0:	663b      	str	r3, [r7, #96]	; 0x60
 80024f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024fa:	4b67      	ldr	r3, [pc, #412]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002502:	65ba      	str	r2, [r7, #88]	; 0x58
 8002504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002506:	fa92 f2a2 	rbit	r2, r2
 800250a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800250c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800250e:	fab2 f282 	clz	r2, r2
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f042 0220 	orr.w	r2, r2, #32
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f002 021f 	and.w	r2, r2, #31
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d17b      	bne.n	8002622 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0f3      	b.n	8002716 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d13c      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x178>
 8002536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_RCC_ClockConfig+0x128>
 800255a:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e00f      	b.n	8002580 <HAL_RCC_ClockConfig+0x148>
 8002560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002564:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	647b      	str	r3, [r7, #68]	; 0x44
 800256e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002572:	643b      	str	r3, [r7, #64]	; 0x40
 8002574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800257c:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002584:	63ba      	str	r2, [r7, #56]	; 0x38
 8002586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002588:	fa92 f2a2 	rbit	r2, r2
 800258c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800258e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f042 0220 	orr.w	r2, r2, #32
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f002 021f 	and.w	r2, r2, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d13a      	bne.n	8002622 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b2      	b.n	8002716 <HAL_RCC_ClockConfig+0x2de>
 80025b0:	2302      	movs	r3, #2
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x1a0>
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e00d      	b.n	80025f4 <HAL_RCC_ClockConfig+0x1bc>
 80025d8:	2302      	movs	r3, #2
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	2202      	movs	r2, #2
 80025f6:	61ba      	str	r2, [r7, #24]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	fa92 f2a2 	rbit	r2, r2
 80025fe:	617a      	str	r2, [r7, #20]
  return result;
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	fab2 f282 	clz	r2, r2
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f042 0220 	orr.w	r2, r2, #32
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f002 021f 	and.w	r2, r2, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f202 	lsl.w	r2, r1, r2
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e079      	b.n	8002716 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	491a      	ldr	r1, [pc, #104]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7fe face 	bl	8000bd4 <HAL_GetTick>
 8002638:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe faca 	bl	8000bd4 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e061      	b.n	8002716 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RCC_ClockConfig+0x260>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_ClockConfig+0x25c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d214      	bcs.n	800269c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_RCC_ClockConfig+0x25c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4906      	ldr	r1, [pc, #24]	; (8002694 <HAL_RCC_ClockConfig+0x25c>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_RCC_ClockConfig+0x25c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e040      	b.n	8002716 <HAL_RCC_ClockConfig+0x2de>
 8002694:	40022000 	.word	0x40022000
 8002698:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <HAL_RCC_ClockConfig+0x2e8>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	491a      	ldr	r1, [pc, #104]	; (8002720 <HAL_RCC_ClockConfig+0x2e8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_RCC_ClockConfig+0x2e8>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4912      	ldr	r1, [pc, #72]	; (8002720 <HAL_RCC_ClockConfig+0x2e8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026da:	f000 f829 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026de:	4601      	mov	r1, r0
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <HAL_RCC_ClockConfig+0x2e8>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e8:	22f0      	movs	r2, #240	; 0xf0
 80026ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	fa92 f2a2 	rbit	r2, r2
 80026f2:	60fa      	str	r2, [r7, #12]
  return result;
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	fab2 f282 	clz	r2, r2
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	40d3      	lsrs	r3, r2
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x2ec>)
 8002700:	5cd3      	ldrb	r3, [r2, r3]
 8002702:	fa21 f303 	lsr.w	r3, r1, r3
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_RCC_ClockConfig+0x2f0>)
 8002708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_RCC_ClockConfig+0x2f4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fa30 	bl	8000b74 <HAL_InitTick>
  
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3778      	adds	r7, #120	; 0x78
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	0800470c 	.word	0x0800470c
 8002728:	20000000 	.word	0x20000000
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b08b      	sub	sp, #44	; 0x2c
 8002734:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d002      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x30>
 800275a:	2b08      	cmp	r3, #8
 800275c:	d003      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x36>
 800275e:	e03c      	b.n	80027da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002760:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002762:	623b      	str	r3, [r7, #32]
      break;
 8002764:	e03c      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800276c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002770:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	607a      	str	r2, [r7, #4]
  return result;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	40d3      	lsrs	r3, r2
 8002784:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	220f      	movs	r2, #15
 8002794:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	fa92 f2a2 	rbit	r2, r2
 800279c:	60fa      	str	r2, [r7, #12]
  return result;
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	fab2 f282 	clz	r2, r2
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	40d3      	lsrs	r3, r2
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
 80027c8:	e004      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	623b      	str	r3, [r7, #32]
      break;
 80027d8:	e002      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027dc:	623b      	str	r3, [r7, #32]
      break;
 80027de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	372c      	adds	r7, #44	; 0x2c
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	007a1200 	.word	0x007a1200
 80027f8:	08004724 	.word	0x08004724
 80027fc:	08004734 	.word	0x08004734
 8002800:	003d0900 	.word	0x003d0900

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002822:	f7ff ffef 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002826:	4601      	mov	r1, r0
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002830:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002834:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	fa92 f2a2 	rbit	r2, r2
 800283c:	603a      	str	r2, [r7, #0]
  return result;
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	fab2 f282 	clz	r2, r2
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	40d3      	lsrs	r3, r2
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <HAL_RCC_GetPCLK1Freq+0x40>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	0800471c 	.word	0x0800471c

08002860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002866:	f7ff ffcd 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800286a:	4601      	mov	r1, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002874:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002878:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	fa92 f2a2 	rbit	r2, r2
 8002880:	603a      	str	r2, [r7, #0]
  return result;
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	fab2 f282 	clz	r2, r2
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	40d3      	lsrs	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	0800471c 	.word	0x0800471c

080028a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b092      	sub	sp, #72	; 0x48
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80d4 	beq.w	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c8:	4b4e      	ldr	r3, [pc, #312]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10e      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	4a4a      	ldr	r2, [pc, #296]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	61d3      	str	r3, [r2, #28]
 80028e0:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b45      	ldr	r3, [pc, #276]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d118      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fe:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a41      	ldr	r2, [pc, #260]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290a:	f7fe f963 	bl	8000bd4 <HAL_GetTick>
 800290e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	e008      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002912:	f7fe f95f 	bl	8000bd4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b64      	cmp	r3, #100	; 0x64
 800291e:	d901      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e169      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002930:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800293a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8084 	beq.w	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800294c:	429a      	cmp	r2, r3
 800294e:	d07c      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	461a      	mov	r2, r3
 800297a:	2301      	movs	r3, #1
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	461a      	mov	r2, r3
 800299e:	2300      	movs	r3, #0
 80029a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029a2:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d04b      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe f90f 	bl	8000bd4 <HAL_GetTick>
 80029b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe f90b 	bl	8000bd4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e113      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80029d0:	2302      	movs	r3, #2
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	2302      	movs	r3, #2
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	61fb      	str	r3, [r7, #28]
  return result;
 80029e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d108      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029fe:	4b01      	ldr	r3, [pc, #4]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	e00d      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	10908100 	.word	0x10908100
 8002a10:	2302      	movs	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2202      	movs	r2, #2
 8002a22:	613a      	str	r2, [r7, #16]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	fa92 f2a2 	rbit	r2, r2
 8002a2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	fab2 f282 	clz	r2, r2
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f002 021f 	and.w	r2, r2, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0b7      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	496a      	ldr	r1, [pc, #424]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b66      	ldr	r3, [pc, #408]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4a65      	ldr	r2, [pc, #404]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a7c:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	f023 0203 	bic.w	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	495d      	ldr	r1, [pc, #372]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a9a:	4b59      	ldr	r3, [pc, #356]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4956      	ldr	r1, [pc, #344]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ab8:	4b51      	ldr	r3, [pc, #324]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	494e      	ldr	r1, [pc, #312]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ad6:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f023 0210 	bic.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4947      	ldr	r1, [pc, #284]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002af4:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	493f      	ldr	r1, [pc, #252]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f023 0220 	bic.w	r2, r3, #32
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4938      	ldr	r1, [pc, #224]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b30:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	4930      	ldr	r1, [pc, #192]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	4929      	ldr	r1, [pc, #164]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	4921      	ldr	r1, [pc, #132]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	491a      	ldr	r1, [pc, #104]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ba8:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	4912      	ldr	r1, [pc, #72]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	490b      	ldr	r1, [pc, #44]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3748      	adds	r7, #72	; 0x48
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e09d      	b.n	8002d52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c26:	d009      	beq.n	8002c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd fe08 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c7c:	d902      	bls.n	8002c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e002      	b.n	8002c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c92:	d007      	beq.n	8002ca4 <HAL_SPI_Init+0xa0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c9c:	d002      	beq.n	8002ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	ea42 0103 	orr.w	r1, r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	0c1b      	lsrs	r3, r3, #16
 8002d00:	f003 0204 	and.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d20:	ea42 0103 	orr.w	r1, r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e049      	b.n	8002e00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fd fdb5 	bl	80008f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f000 f9e7 	bl	800316c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d001      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e04a      	b.n	8002eb6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d018      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x6c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d013      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x6c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00e      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x6c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x6c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x6c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d115      	bne.n	8002ea0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d015      	beq.n	8002eb2 <HAL_TIM_Base_Start_IT+0xaa>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d011      	beq.n	8002eb2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9e:	e008      	b.n	8002eb2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e000      	b.n	8002eb4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40013400 	.word	0x40013400
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	00010007 	.word	0x00010007

08002edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d122      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d11b      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0202 	mvn.w	r2, #2
 8002f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f905 	bl	800312e <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8f7 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f908 	bl	8003142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d122      	bne.n	8002f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0204 	mvn.w	r2, #4
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8db 	bl	800312e <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f8cd 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f8de 	bl	8003142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d122      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d11b      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0208 	mvn.w	r2, #8
 8002fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8b1 	bl	800312e <HAL_TIM_IC_CaptureCallback>
 8002fcc:	e005      	b.n	8002fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8a3 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f8b4 	bl	8003142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d122      	bne.n	8003034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d11b      	bne.n	8003034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0210 	mvn.w	r2, #16
 8003004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2208      	movs	r2, #8
 800300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f887 	bl	800312e <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f879 	bl	800311a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f88a 	bl	8003142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d10e      	bne.n	8003060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d107      	bne.n	8003060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0201 	mvn.w	r2, #1
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f001 f9ae 	bl	80043bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b80      	cmp	r3, #128	; 0x80
 800306c:	d10e      	bne.n	800308c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b80      	cmp	r3, #128	; 0x80
 800307a:	d107      	bne.n	800308c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f90a 	bl	80032a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309a:	d10e      	bne.n	80030ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d107      	bne.n	80030ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f8fd 	bl	80032b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d10e      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d107      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f838 	bl	8003156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d10e      	bne.n	8003112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d107      	bne.n	8003112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0220 	mvn.w	r2, #32
 800310a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f8bd 	bl	800328c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3c      	ldr	r2, [pc, #240]	; (8003270 <TIM_Base_SetConfig+0x104>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00f      	beq.n	80031a4 <TIM_Base_SetConfig+0x38>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d00b      	beq.n	80031a4 <TIM_Base_SetConfig+0x38>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a39      	ldr	r2, [pc, #228]	; (8003274 <TIM_Base_SetConfig+0x108>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <TIM_Base_SetConfig+0x38>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a38      	ldr	r2, [pc, #224]	; (8003278 <TIM_Base_SetConfig+0x10c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_Base_SetConfig+0x38>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a37      	ldr	r2, [pc, #220]	; (800327c <TIM_Base_SetConfig+0x110>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d108      	bne.n	80031b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2d      	ldr	r2, [pc, #180]	; (8003270 <TIM_Base_SetConfig+0x104>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01b      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d017      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <TIM_Base_SetConfig+0x108>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a29      	ldr	r2, [pc, #164]	; (8003278 <TIM_Base_SetConfig+0x10c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00f      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <TIM_Base_SetConfig+0x110>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <TIM_Base_SetConfig+0x114>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <TIM_Base_SetConfig+0x118>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a25      	ldr	r2, [pc, #148]	; (8003288 <TIM_Base_SetConfig+0x11c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <TIM_Base_SetConfig+0x104>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00f      	beq.n	8003254 <TIM_Base_SetConfig+0xe8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a11      	ldr	r2, [pc, #68]	; (800327c <TIM_Base_SetConfig+0x110>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00b      	beq.n	8003254 <TIM_Base_SetConfig+0xe8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a10      	ldr	r2, [pc, #64]	; (8003280 <TIM_Base_SetConfig+0x114>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d007      	beq.n	8003254 <TIM_Base_SetConfig+0xe8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <TIM_Base_SetConfig+0x118>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <TIM_Base_SetConfig+0xe8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <TIM_Base_SetConfig+0x11c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40000400 	.word	0x40000400
 8003278:	40000800 	.word	0x40000800
 800327c:	40013400 	.word	0x40013400
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800

0800328c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e040      	b.n	800335c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fb26 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	; 0x24
 80032f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa4c 	bl	80037a4 <UART_SetConfig>
 800330c:	4603      	mov	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e022      	b.n	800335c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fc14 	bl	8003b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fc9b 	bl	8003c90 <UART_CheckIdleState>
 800335a:	4603      	mov	r3, r0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	f640 030f 	movw	r3, #2063	; 0x80f
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d113      	bne.n	80033bc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00e      	beq.n	80033bc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 81cc 	beq.w	800374a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
      }
      return;
 80033ba:	e1c6      	b.n	800374a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80e3 	beq.w	800358a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4ba5      	ldr	r3, [pc, #660]	; (8003668 <HAL_UART_IRQHandler+0x304>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80d8 	beq.w	800358a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_UART_IRQHandler+0xa2>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d010      	beq.n	8003432 <HAL_UART_IRQHandler+0xce>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2202      	movs	r2, #2
 8003420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_UART_IRQHandler+0xfa>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2204      	movs	r2, #4
 800344c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003454:	f043 0202 	orr.w	r2, r3, #2
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2208      	movs	r2, #8
 8003482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348a:	f043 0208 	orr.w	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349a:	2b00      	cmp	r3, #0
 800349c:	d011      	beq.n	80034c2 <HAL_UART_IRQHandler+0x15e>
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8140 	beq.w	800374e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d004      	beq.n	8003512 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800350e:	2b00      	cmp	r3, #0
 8003510:	d031      	beq.n	8003576 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fc81 	bl	8003e1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d123      	bne.n	800356e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003534:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	2b00      	cmp	r3, #0
 800353c:	d013      	beq.n	8003566 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a4a      	ldr	r2, [pc, #296]	; (800366c <HAL_UART_IRQHandler+0x308>)
 8003544:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fc98 	bl	8000e80 <HAL_DMA_Abort_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003560:	4610      	mov	r0, r2
 8003562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	e00f      	b.n	8003586 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f906 	bl	8003778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	e00b      	b.n	8003586 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f902 	bl	8003778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	e007      	b.n	8003586 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8fe 	bl	8003778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003584:	e0e3      	b.n	800374e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003586:	bf00      	nop
    return;
 8003588:	e0e1      	b.n	800374e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	2b01      	cmp	r3, #1
 8003590:	f040 80a7 	bne.w	80036e2 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80a1 	beq.w	80036e2 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 809b 	beq.w	80036e2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2210      	movs	r2, #16
 80035b2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d156      	bne.n	8003670 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80035cc:	893b      	ldrh	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80bf 	beq.w	8003752 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035da:	893a      	ldrh	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f080 80b8 	bcs.w	8003752 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	893a      	ldrh	r2, [r7, #8]
 80035e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d02a      	beq.n	800364a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003602:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003622:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0210 	bic.w	r2, r2, #16
 800363e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fbe2 	bl	8000e0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003656:	b29b      	uxth	r3, r3
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	b29b      	uxth	r3, r3
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f894 	bl	800378c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003664:	e075      	b.n	8003752 <HAL_UART_IRQHandler+0x3ee>
 8003666:	bf00      	nop
 8003668:	04000120 	.word	0x04000120
 800366c:	08003e79 	.word	0x08003e79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800367c:	b29b      	uxth	r3, r3
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d063      	beq.n	8003756 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d060      	beq.n	8003756 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0210 	bic.w	r2, r2, #16
 80036d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f856 	bl	800378c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036e0:	e039      	b.n	8003756 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <HAL_UART_IRQHandler+0x3a4>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fbe8 	bl	8003ed6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003706:	e029      	b.n	800375c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01a      	beq.n	800375a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
    }
    return;
 800372c:	e015      	b.n	800375a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d011      	beq.n	800375c <HAL_UART_IRQHandler+0x3f8>
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fbae 	bl	8003ea4 <UART_EndTransmit_IT>
    return;
 8003748:	e008      	b.n	800375c <HAL_UART_IRQHandler+0x3f8>
      return;
 800374a:	bf00      	nop
 800374c:	e006      	b.n	800375c <HAL_UART_IRQHandler+0x3f8>
    return;
 800374e:	bf00      	nop
 8003750:	e004      	b.n	800375c <HAL_UART_IRQHandler+0x3f8>
      return;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_UART_IRQHandler+0x3f8>
      return;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_UART_IRQHandler+0x3f8>
    return;
 800375a:	bf00      	nop
  }

}
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop

08003764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037d2:	f023 030c 	bic.w	r3, r3, #12
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	6979      	ldr	r1, [r7, #20]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4aae      	ldr	r2, [pc, #696]	; (8003ad8 <UART_SetConfig+0x334>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d120      	bne.n	8003866 <UART_SetConfig+0xc2>
 8003824:	4bad      	ldr	r3, [pc, #692]	; (8003adc <UART_SetConfig+0x338>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b03      	cmp	r3, #3
 800382e:	d817      	bhi.n	8003860 <UART_SetConfig+0xbc>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0x94>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003849 	.word	0x08003849
 800383c:	08003855 	.word	0x08003855
 8003840:	0800385b 	.word	0x0800385b
 8003844:	0800384f 	.word	0x0800384f
 8003848:	2301      	movs	r3, #1
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e0b5      	b.n	80039ba <UART_SetConfig+0x216>
 800384e:	2302      	movs	r3, #2
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e0b2      	b.n	80039ba <UART_SetConfig+0x216>
 8003854:	2304      	movs	r3, #4
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e0af      	b.n	80039ba <UART_SetConfig+0x216>
 800385a:	2308      	movs	r3, #8
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e0ac      	b.n	80039ba <UART_SetConfig+0x216>
 8003860:	2310      	movs	r3, #16
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e0a9      	b.n	80039ba <UART_SetConfig+0x216>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a9d      	ldr	r2, [pc, #628]	; (8003ae0 <UART_SetConfig+0x33c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d124      	bne.n	80038ba <UART_SetConfig+0x116>
 8003870:	4b9a      	ldr	r3, [pc, #616]	; (8003adc <UART_SetConfig+0x338>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800387c:	d011      	beq.n	80038a2 <UART_SetConfig+0xfe>
 800387e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003882:	d817      	bhi.n	80038b4 <UART_SetConfig+0x110>
 8003884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003888:	d011      	beq.n	80038ae <UART_SetConfig+0x10a>
 800388a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800388e:	d811      	bhi.n	80038b4 <UART_SetConfig+0x110>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <UART_SetConfig+0xf8>
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d006      	beq.n	80038a8 <UART_SetConfig+0x104>
 800389a:	e00b      	b.n	80038b4 <UART_SetConfig+0x110>
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e08b      	b.n	80039ba <UART_SetConfig+0x216>
 80038a2:	2302      	movs	r3, #2
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e088      	b.n	80039ba <UART_SetConfig+0x216>
 80038a8:	2304      	movs	r3, #4
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e085      	b.n	80039ba <UART_SetConfig+0x216>
 80038ae:	2308      	movs	r3, #8
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e082      	b.n	80039ba <UART_SetConfig+0x216>
 80038b4:	2310      	movs	r3, #16
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e07f      	b.n	80039ba <UART_SetConfig+0x216>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a89      	ldr	r2, [pc, #548]	; (8003ae4 <UART_SetConfig+0x340>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d124      	bne.n	800390e <UART_SetConfig+0x16a>
 80038c4:	4b85      	ldr	r3, [pc, #532]	; (8003adc <UART_SetConfig+0x338>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80038cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038d0:	d011      	beq.n	80038f6 <UART_SetConfig+0x152>
 80038d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038d6:	d817      	bhi.n	8003908 <UART_SetConfig+0x164>
 80038d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038dc:	d011      	beq.n	8003902 <UART_SetConfig+0x15e>
 80038de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038e2:	d811      	bhi.n	8003908 <UART_SetConfig+0x164>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <UART_SetConfig+0x14c>
 80038e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038ec:	d006      	beq.n	80038fc <UART_SetConfig+0x158>
 80038ee:	e00b      	b.n	8003908 <UART_SetConfig+0x164>
 80038f0:	2300      	movs	r3, #0
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e061      	b.n	80039ba <UART_SetConfig+0x216>
 80038f6:	2302      	movs	r3, #2
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e05e      	b.n	80039ba <UART_SetConfig+0x216>
 80038fc:	2304      	movs	r3, #4
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e05b      	b.n	80039ba <UART_SetConfig+0x216>
 8003902:	2308      	movs	r3, #8
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e058      	b.n	80039ba <UART_SetConfig+0x216>
 8003908:	2310      	movs	r3, #16
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e055      	b.n	80039ba <UART_SetConfig+0x216>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a75      	ldr	r2, [pc, #468]	; (8003ae8 <UART_SetConfig+0x344>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d124      	bne.n	8003962 <UART_SetConfig+0x1be>
 8003918:	4b70      	ldr	r3, [pc, #448]	; (8003adc <UART_SetConfig+0x338>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003920:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003924:	d011      	beq.n	800394a <UART_SetConfig+0x1a6>
 8003926:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800392a:	d817      	bhi.n	800395c <UART_SetConfig+0x1b8>
 800392c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003930:	d011      	beq.n	8003956 <UART_SetConfig+0x1b2>
 8003932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003936:	d811      	bhi.n	800395c <UART_SetConfig+0x1b8>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <UART_SetConfig+0x1a0>
 800393c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003940:	d006      	beq.n	8003950 <UART_SetConfig+0x1ac>
 8003942:	e00b      	b.n	800395c <UART_SetConfig+0x1b8>
 8003944:	2300      	movs	r3, #0
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e037      	b.n	80039ba <UART_SetConfig+0x216>
 800394a:	2302      	movs	r3, #2
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e034      	b.n	80039ba <UART_SetConfig+0x216>
 8003950:	2304      	movs	r3, #4
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e031      	b.n	80039ba <UART_SetConfig+0x216>
 8003956:	2308      	movs	r3, #8
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e02e      	b.n	80039ba <UART_SetConfig+0x216>
 800395c:	2310      	movs	r3, #16
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e02b      	b.n	80039ba <UART_SetConfig+0x216>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a61      	ldr	r2, [pc, #388]	; (8003aec <UART_SetConfig+0x348>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d124      	bne.n	80039b6 <UART_SetConfig+0x212>
 800396c:	4b5b      	ldr	r3, [pc, #364]	; (8003adc <UART_SetConfig+0x338>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003974:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003978:	d011      	beq.n	800399e <UART_SetConfig+0x1fa>
 800397a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800397e:	d817      	bhi.n	80039b0 <UART_SetConfig+0x20c>
 8003980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003984:	d011      	beq.n	80039aa <UART_SetConfig+0x206>
 8003986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800398a:	d811      	bhi.n	80039b0 <UART_SetConfig+0x20c>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <UART_SetConfig+0x1f4>
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d006      	beq.n	80039a4 <UART_SetConfig+0x200>
 8003996:	e00b      	b.n	80039b0 <UART_SetConfig+0x20c>
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e00d      	b.n	80039ba <UART_SetConfig+0x216>
 800399e:	2302      	movs	r3, #2
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e00a      	b.n	80039ba <UART_SetConfig+0x216>
 80039a4:	2304      	movs	r3, #4
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e007      	b.n	80039ba <UART_SetConfig+0x216>
 80039aa:	2308      	movs	r3, #8
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e004      	b.n	80039ba <UART_SetConfig+0x216>
 80039b0:	2310      	movs	r3, #16
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e001      	b.n	80039ba <UART_SetConfig+0x216>
 80039b6:	2310      	movs	r3, #16
 80039b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c2:	d15c      	bne.n	8003a7e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80039c4:	7ffb      	ldrb	r3, [r7, #31]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d827      	bhi.n	8003a1a <UART_SetConfig+0x276>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <UART_SetConfig+0x22c>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a1b 	.word	0x08003a1b
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a1b 	.word	0x08003a1b
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7fe ff12 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80039f8:	61b8      	str	r0, [r7, #24]
        break;
 80039fa:	e013      	b.n	8003a24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe ff30 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 8003a00:	61b8      	str	r0, [r7, #24]
        break;
 8003a02:	e00f      	b.n	8003a24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <UART_SetConfig+0x34c>)
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e00c      	b.n	8003a24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe fe91 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8003a0e:	61b8      	str	r0, [r7, #24]
        break;
 8003a10:	e008      	b.n	8003a24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e004      	b.n	8003a24 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	77bb      	strb	r3, [r7, #30]
        break;
 8003a22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8085 	beq.w	8003b36 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	005a      	lsls	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	441a      	add	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0f      	cmp	r3, #15
 8003a48:	d916      	bls.n	8003a78 <UART_SetConfig+0x2d4>
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d212      	bcs.n	8003a78 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f023 030f 	bic.w	r3, r3, #15
 8003a5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	89fb      	ldrh	r3, [r7, #14]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	89fa      	ldrh	r2, [r7, #14]
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	e05e      	b.n	8003b36 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	77bb      	strb	r3, [r7, #30]
 8003a7c:	e05b      	b.n	8003b36 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d837      	bhi.n	8003af4 <UART_SetConfig+0x350>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x2e8>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ab1 	.word	0x08003ab1
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003af5 	.word	0x08003af5
 8003a9c:	08003ac7 	.word	0x08003ac7
 8003aa0:	08003af5 	.word	0x08003af5
 8003aa4:	08003af5 	.word	0x08003af5
 8003aa8:	08003af5 	.word	0x08003af5
 8003aac:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe feb4 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003ab4:	61b8      	str	r0, [r7, #24]
        break;
 8003ab6:	e022      	b.n	8003afe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fed2 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 8003abc:	61b8      	str	r0, [r7, #24]
        break;
 8003abe:	e01e      	b.n	8003afe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <UART_SetConfig+0x34c>)
 8003ac2:	61bb      	str	r3, [r7, #24]
        break;
 8003ac4:	e01b      	b.n	8003afe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fe33 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8003aca:	61b8      	str	r0, [r7, #24]
        break;
 8003acc:	e017      	b.n	8003afe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	61bb      	str	r3, [r7, #24]
        break;
 8003ad4:	e013      	b.n	8003afe <UART_SetConfig+0x35a>
 8003ad6:	bf00      	nop
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40004400 	.word	0x40004400
 8003ae4:	40004800 	.word	0x40004800
 8003ae8:	40004c00 	.word	0x40004c00
 8003aec:	40005000 	.word	0x40005000
 8003af0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	77bb      	strb	r3, [r7, #30]
        break;
 8003afc:	bf00      	nop
    }

    if (pclk != 0U)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d018      	beq.n	8003b36 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	085a      	lsrs	r2, r3, #1
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	441a      	add	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b0f      	cmp	r3, #15
 8003b1e:	d908      	bls.n	8003b32 <UART_SetConfig+0x38e>
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b26:	d204      	bcs.n	8003b32 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	e001      	b.n	8003b36 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b42:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01a      	beq.n	8003c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d10a      	bne.n	8003c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fc ff98 	bl	8000bd4 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d10e      	bne.n	8003cd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f82d 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e023      	b.n	8003d1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d10e      	bne.n	8003cfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f817 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e00d      	b.n	8003d1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d32:	e05e      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d05a      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3c:	f7fc ff4a 	bl	8000bd4 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11b      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e043      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02c      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da6:	d124      	bne.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e00f      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d091      	beq.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e30:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0210 	bic.w	r2, r2, #16
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff fc6e 	bl	8003778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fc4b 	bl	8003764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ef6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f20:	b084      	sub	sp, #16
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	f107 0014 	add.w	r0, r7, #20
 8003f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	b004      	add	sp, #16
 8003f60:	4770      	bx	lr
	...

08003f64 <__NVIC_SetPriority>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	db0a      	blt.n	8003f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	490c      	ldr	r1, [pc, #48]	; (8003fb0 <__NVIC_SetPriority+0x4c>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	440b      	add	r3, r1
 8003f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f8c:	e00a      	b.n	8003fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4908      	ldr	r1, [pc, #32]	; (8003fb4 <__NVIC_SetPriority+0x50>)
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	3b04      	subs	r3, #4
 8003f9c:	0112      	lsls	r2, r2, #4
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	761a      	strb	r2, [r3, #24]
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000e100 	.word	0xe000e100
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <SysTick_Config>:
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc8:	d301      	bcc.n	8003fce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e00f      	b.n	8003fee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <SysTick_Config+0x40>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd6:	210f      	movs	r1, #15
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	f7ff ffc2 	bl	8003f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <SysTick_Config+0x40>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <SysTick_Config+0x40>)
 8003fe8:	2207      	movs	r2, #7
 8003fea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000e010 	.word	0xe000e010

08003ffc <OS_Init>:
// Initialize operating system, disable interrupts
// Initialize OS controlled I/O: periodic interrupt, bus clock as fast as possible
// Initialize OS global variables
// Inputs:  none
// Outputs: none
void OS_Init(void){
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004000:	b672      	cpsid	i
}
 8004002:	bf00      	nop
  __disable_irq();
  // perform any initializations needed
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <SetInitialStack>:

void SetInitialStack(int i){
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  tcbs[i].sp = &Stacks[i][STACKSIZE-16]; // thread stack pointer
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004026:	4a60      	ldr	r2, [pc, #384]	; (80041a8 <SetInitialStack+0x198>)
 8004028:	441a      	add	r2, r3
 800402a:	4960      	ldr	r1, [pc, #384]	; (80041ac <SetInitialStack+0x19c>)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	440b      	add	r3, r1
 8004032:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-1] = 0x01000000;   // thumb bit
 8004034:	4a5c      	ldr	r2, [pc, #368]	; (80041a8 <SetInitialStack+0x198>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004046:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800404a:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-3] = 0x14141414;   // R14
 800404c:	4a56      	ldr	r2, [pc, #344]	; (80041a8 <SetInitialStack+0x198>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800405e:	f04f 3214 	mov.w	r2, #336860180	; 0x14141414
 8004062:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-4] = 0x12121212;   // R12
 8004064:	4a50      	ldr	r2, [pc, #320]	; (80041a8 <SetInitialStack+0x198>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004076:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800407a:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-5] = 0x03030303;   // R3
 800407c:	4a4a      	ldr	r2, [pc, #296]	; (80041a8 <SetInitialStack+0x198>)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800408e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8004092:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-6] = 0x02020202;   // R2
 8004094:	4a44      	ldr	r2, [pc, #272]	; (80041a8 <SetInitialStack+0x198>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80040a6:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80040aa:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-7] = 0x01010101;   // R1
 80040ac:	4a3e      	ldr	r2, [pc, #248]	; (80041a8 <SetInitialStack+0x198>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80040be:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80040c2:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-8] = 0x00000000;   // R0
 80040c4:	4a38      	ldr	r2, [pc, #224]	; (80041a8 <SetInitialStack+0x198>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-9] = 0x11111111;   // R11
 80040da:	4a33      	ldr	r2, [pc, #204]	; (80041a8 <SetInitialStack+0x198>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80040ec:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80040f0:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-10] = 0x10101010;  // R10
 80040f2:	4a2d      	ldr	r2, [pc, #180]	; (80041a8 <SetInitialStack+0x198>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004104:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8004108:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-11] = 0x09090909;  // R9
 800410a:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <SetInitialStack+0x198>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800411c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8004120:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-12] = 0x08080808;  // R8
 8004122:	4a21      	ldr	r2, [pc, #132]	; (80041a8 <SetInitialStack+0x198>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004134:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8004138:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-13] = 0x07070707;  // R7
 800413a:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <SetInitialStack+0x198>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800414c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8004150:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-14] = 0x06060606;  // R6
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <SetInitialStack+0x198>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	4413      	add	r3, r2
 8004160:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004164:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8004168:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-15] = 0x05050505;  // R5
 800416a:	4a0f      	ldr	r2, [pc, #60]	; (80041a8 <SetInitialStack+0x198>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800417c:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8004180:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-16] = 0x04040404;  // R4
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <SetInitialStack+0x198>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004194:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8004198:	601a      	str	r2, [r3, #0]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	200004c8 	.word	0x200004c8
 80041ac:	20000e4c 	.word	0x20000e4c

080041b0 <OS_AddThreads>:
int OS_AddThreads(void(*thread0)(void),
                  void(*thread1)(void),
                  void(*thread2)(void),
                  void(*thread3)(void),
                  void(*thread4)(void),
                  void(*thread5)(void)){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	; 0x30
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  // ****initialize as not blocked, not sleeping****
  void (*fThreads[NUMTHREADS])() = {
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
    thread3,
    thread4,
    thread5
  };
  int32_t status;
  status = StartCritical();
 80041d6:	f000 fa58 	bl	800468a <StartCritical>
 80041da:	62b8      	str	r0, [r7, #40]	; 0x28

  for (uint8_t i = 0; i < NUMTHREADS; i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80041e2:	e040      	b.n	8004266 <OS_AddThreads+0xb6>
  {
    tcbs[i].next = &tcbs[i + 1 == NUMTHREADS ? 0 : i + 1];
 80041e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d003      	beq.n	80041f4 <OS_AddThreads+0x44>
 80041ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041f0:	3301      	adds	r3, #1
 80041f2:	e000      	b.n	80041f6 <OS_AddThreads+0x46>
 80041f4:	2300      	movs	r3, #0
 80041f6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	4a21      	ldr	r2, [pc, #132]	; (8004284 <OS_AddThreads+0xd4>)
 80041fe:	441a      	add	r2, r3
 8004200:	4820      	ldr	r0, [pc, #128]	; (8004284 <OS_AddThreads+0xd4>)
 8004202:	010b      	lsls	r3, r1, #4
 8004204:	4403      	add	r3, r0
 8004206:	3304      	adds	r3, #4
 8004208:	601a      	str	r2, [r3, #0]
    tcbs[i].blocked = 0;
 800420a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800420e:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <OS_AddThreads+0xd4>)
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	4413      	add	r3, r2
 8004214:	3308      	adds	r3, #8
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
    tcbs[i].sleep = 0;
 800421a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <OS_AddThreads+0xd4>)
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	4413      	add	r3, r2
 8004224:	330c      	adds	r3, #12
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
    SetInitialStack(i);
 800422a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff feee 	bl	8004010 <SetInitialStack>
    Stacks[i][STACKSIZE-2] = (int32_t)(fThreads[i]);
 8004234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800423e:	4413      	add	r3, r2
 8004240:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8004244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004248:	4610      	mov	r0, r2
 800424a:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <OS_AddThreads+0xd8>)
 800424c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800425a:	6018      	str	r0, [r3, #0]
  for (uint8_t i = 0; i < NUMTHREADS; i++)
 800425c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004260:	3301      	adds	r3, #1
 8004262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800426a:	2b05      	cmp	r3, #5
 800426c:	d9ba      	bls.n	80041e4 <OS_AddThreads+0x34>
  }

  RunPt = &tcbs[0];       // thread 0 will run first
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <OS_AddThreads+0xdc>)
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <OS_AddThreads+0xd4>)
 8004272:	601a      	str	r2, [r3, #0]
  EndCritical(status);
 8004274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004276:	f000 fa0c 	bl	8004692 <EndCritical>
  
  return 1;               // successful
 800427a:	2301      	movs	r3, #1
}
 800427c:	4618      	mov	r0, r3
 800427e:	3730      	adds	r7, #48	; 0x30
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000e4c 	.word	0x20000e4c
 8004288:	200004c8 	.word	0x200004c8
 800428c:	20000ed8 	.word	0x20000ed8

08004290 <OS_AddPeriodicEventThread>:
// It is assumed that the event threads will run to completion and return
// It is assumed the time to run these event threads is short compared to 1 msec
// These threads cannot spin, block, loop, sleep, or kill
// These threads can call OS_Signal
// In Lab 3 this will be called exactly twice
int OS_AddPeriodicEventThread(void(*thread)(void), uint32_t period){
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  if (petCurrentSize != NUMPERIODIC)
 800429a:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <OS_AddPeriodicEventThread+0x84>)
 800429c:	f993 3000 	ldrsb.w	r3, [r3]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d030      	beq.n	8004306 <OS_AddPeriodicEventThread+0x76>
  {
	  petcbs[petCurrentSize].period = period;
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <OS_AddPeriodicEventThread+0x84>)
 80042a6:	f993 3000 	ldrsb.w	r3, [r3]
 80042aa:	4618      	mov	r0, r3
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	491a      	ldr	r1, [pc, #104]	; (8004318 <OS_AddPeriodicEventThread+0x88>)
 80042b0:	4603      	mov	r3, r0
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4403      	add	r3, r0
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	601a      	str	r2, [r3, #0]
	  petcbs[petCurrentSize].sleep = period;
 80042bc:	4b15      	ldr	r3, [pc, #84]	; (8004314 <OS_AddPeriodicEventThread+0x84>)
 80042be:	f993 3000 	ldrsb.w	r3, [r3]
 80042c2:	4618      	mov	r0, r3
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	4914      	ldr	r1, [pc, #80]	; (8004318 <OS_AddPeriodicEventThread+0x88>)
 80042c8:	4603      	mov	r3, r0
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4403      	add	r3, r0
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3304      	adds	r3, #4
 80042d4:	601a      	str	r2, [r3, #0]
	  petcbs[petCurrentSize].periodicTask = thread;
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <OS_AddPeriodicEventThread+0x84>)
 80042d8:	f993 3000 	ldrsb.w	r3, [r3]
 80042dc:	4619      	mov	r1, r3
 80042de:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <OS_AddPeriodicEventThread+0x88>)
 80042e0:	460b      	mov	r3, r1
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	440b      	add	r3, r1
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	3308      	adds	r3, #8
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	601a      	str	r2, [r3, #0]
	  petCurrentSize++;
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <OS_AddPeriodicEventThread+0x84>)
 80042f2:	f993 3000 	ldrsb.w	r3, [r3]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	b25a      	sxtb	r2, r3
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <OS_AddPeriodicEventThread+0x84>)
 8004300:	701a      	strb	r2, [r3, #0]
  }
  else
  {
	  return 0;	// full
  }
  return 1;		// success
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <OS_AddPeriodicEventThread+0x78>
	  return 0;	// full
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000030 	.word	0x20000030
 8004318:	20000e2c 	.word	0x20000e2c

0800431c <OS_Launch>:
//******** OS_Launch ***************
// Start the scheduler, enable interrupts
// Inputs: number of clock cycles for each time slice
// Outputs: none (does not return)
// Errors: theTimeSlice must be less than 16,777,216
void OS_Launch(uint32_t theTimeSlice){
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  SysTick_Config(theTimeSlice);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff fe47 	bl	8003fb8 <SysTick_Config>
  StartOS();                   // start on the first task
 800432a:	f000 f99f 	bl	800466c <StartOS>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <Scheduler>:
// runs every ms
void Scheduler(void){ // every time slice
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  RunPt = RunPt->next;
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <Scheduler+0x3c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <Scheduler+0x3c>)
 8004344:	6013      	str	r3, [r2, #0]

  while (RunPt->blocked || RunPt->sleep)
 8004346:	e004      	b.n	8004352 <Scheduler+0x1a>
  {
    RunPt = RunPt->next; // find one not sleeping and not blocked 
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <Scheduler+0x3c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <Scheduler+0x3c>)
 8004350:	6013      	str	r3, [r2, #0]
  while (RunPt->blocked || RunPt->sleep)
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <Scheduler+0x3c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f5      	bne.n	8004348 <Scheduler+0x10>
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <Scheduler+0x3c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <Scheduler+0x10>
  }
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000ed8 	.word	0x20000ed8

08004378 <OS_Suspend>:
//******** OS_Suspend ***************
// Called by main thread to cooperatively suspend operation
// Inputs: none
// Outputs: none
// Will be run again depending on sleep/block status
void OS_Suspend(void){
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  SysTick->VAL   = 0UL;	  				// any write to current clears it
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <OS_Suspend+0x1c>)
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
  SCB->ICSR = SCB_ICSR_PENDSTSET_Msk;	// trigger SysTick
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <OS_Suspend+0x20>)
 8004384:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004388:	605a      	str	r2, [r3, #4]
// next thread gets a full time slice
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000e010 	.word	0xe000e010
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <OS_Sleep>:
// ******** OS_Sleep ************
// place this thread into a dormant state
// input:  number of msec to sleep
// output: none
// OS_Sleep(0) implements cooperative multitasking
void OS_Sleep(uint32_t sleepTime){
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  RunPt->sleep = sleepTime;	// set sleep parameter in TCB
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <OS_Sleep+0x1c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]
  OS_Suspend();				// suspend, stops running
 80043ac:	f7ff ffe4 	bl	8004378 <OS_Suspend>
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20000ed8 	.word	0x20000ed8

080043bc <HAL_TIM_PeriodElapsedCallback>:
// timer reload HAL interrupt handler
// input:  handler of stm32 timer
// output: none
// OS_Sleep(0) implements cooperative multitasking
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM16)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a32      	ldr	r2, [pc, #200]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d15e      	bne.n	800448c <HAL_TIM_PeriodElapsedCallback+0xd0>
  {
    for(uint8_t i = 0; i < NUMTHREADS; i++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	e016      	b.n	8004402 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
	  if(tcbs[i].sleep)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	4a30      	ldr	r2, [pc, #192]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	4413      	add	r3, r2
 80043dc:	330c      	adds	r3, #12
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_TIM_PeriodElapsedCallback+0x40>
	    tcbs[i].sleep--;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	492c      	ldr	r1, [pc, #176]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80043e8:	011a      	lsls	r2, r3, #4
 80043ea:	440a      	add	r2, r1
 80043ec:	320c      	adds	r2, #12
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	3a01      	subs	r2, #1
 80043f2:	4929      	ldr	r1, [pc, #164]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	440b      	add	r3, r1
 80043f8:	330c      	adds	r3, #12
 80043fa:	601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < NUMTHREADS; i++)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	3301      	adds	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b05      	cmp	r3, #5
 8004406:	d9e5      	bls.n	80043d4 <HAL_TIM_PeriodElapsedCallback+0x18>
	}

    for(uint8_t i = 0; i < NUMPERIODIC; i++)
 8004408:	2300      	movs	r3, #0
 800440a:	73bb      	strb	r3, [r7, #14]
 800440c:	e03b      	b.n	8004486 <HAL_TIM_PeriodElapsedCallback+0xca>
    {
      if(petcbs[i].sleep) 	// check if periodic event task is ready to proceed
 800440e:	7bba      	ldrb	r2, [r7, #14]
 8004410:	4922      	ldr	r1, [pc, #136]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3304      	adds	r3, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d012      	beq.n	800444a <HAL_TIM_PeriodElapsedCallback+0x8e>
      {
        petcbs[i].sleep--;
 8004424:	7bba      	ldrb	r2, [r7, #14]
 8004426:	491d      	ldr	r1, [pc, #116]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3304      	adds	r3, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1e59      	subs	r1, r3, #1
 8004438:	4818      	ldr	r0, [pc, #96]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4403      	add	r3, r0
 8004444:	3304      	adds	r3, #4
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	e01a      	b.n	8004480 <HAL_TIM_PeriodElapsedCallback+0xc4>
      }
      else
      {
    	petcbs[i].sleep = petcbs[i].period; // set task in sleep mode again
 800444a:	7bb9      	ldrb	r1, [r7, #14]
 800444c:	7bba      	ldrb	r2, [r7, #14]
 800444e:	4813      	ldr	r0, [pc, #76]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004450:	460b      	mov	r3, r1
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	440b      	add	r3, r1
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4403      	add	r3, r0
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	480f      	ldr	r0, [pc, #60]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4403      	add	r3, r0
 8004468:	3304      	adds	r3, #4
 800446a:	6019      	str	r1, [r3, #0]
        (*petcbs[i].periodicTask)();			// run task
 800446c:	7bba      	ldrb	r2, [r7, #14]
 800446e:	490b      	ldr	r1, [pc, #44]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3308      	adds	r3, #8
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4798      	blx	r3
    for(uint8_t i = 0; i < NUMPERIODIC; i++)
 8004480:	7bbb      	ldrb	r3, [r7, #14]
 8004482:	3301      	adds	r3, #1
 8004484:	73bb      	strb	r3, [r7, #14]
 8004486:	7bbb      	ldrb	r3, [r7, #14]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d9c0      	bls.n	800440e <HAL_TIM_PeriodElapsedCallback+0x52>
      }
    }
  }
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40014400 	.word	0x40014400
 8004498:	20000e4c 	.word	0x20000e4c
 800449c:	20000e2c 	.word	0x20000e2c

080044a0 <OS_InitSemaphore>:
// ******** OS_InitSemaphore ************
// Initialize counting semaphore
// Inputs:  pointer to a semaphore
//          initial value of semaphore
// Outputs: none
void OS_InitSemaphore(int32_t *semaPt, int32_t value){
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  *semaPt = value;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	601a      	str	r2, [r3, #0]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <OS_Wait>:
// Decrement semaphore and block if less than zero
// Lab2 spinlock (does not suspend while spinning)
// Lab3 block if less than zero
// Inputs:  pointer to a counting semaphore
// Outputs: none
void OS_Wait(int32_t *semaPt){
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80044c4:	b672      	cpsid	i
}
 80044c6:	bf00      	nop
  __disable_irq();
  (*semaPt)--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]

  if (*semaPt < 0)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	da07      	bge.n	80044ea <OS_Wait+0x2e>
  {
    RunPt->blocked = semaPt;
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <OS_Wait+0x3c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80044e2:	b662      	cpsie	i
}
 80044e4:	bf00      	nop
    __enable_irq();
    OS_Suspend();
 80044e6:	f7ff ff47 	bl	8004378 <OS_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 80044ea:	b662      	cpsie	i
}
 80044ec:	bf00      	nop
  }

  __enable_irq();
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000ed8 	.word	0x20000ed8

080044fc <OS_Signal>:
// Increment semaphore
// Lab2 spinlock
// Lab3 wakeup blocked thread if appropriate
// Inputs:  pointer to a counting semaphore
// Outputs: none
void OS_Signal(int32_t *semaPt){
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004504:	b672      	cpsid	i
}
 8004506:	bf00      	nop
  tcbType *pt;
  __disable_irq();
  (*semaPt)++;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]

  if (*semaPt <= 0)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	dc0f      	bgt.n	800453a <OS_Signal+0x3e>
  {
    pt = RunPt->next; // search for a thread blocked on this semaphore
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <OS_Signal+0x50>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]

    while (pt->blocked != semaPt)
 8004522:	e002      	b.n	800452a <OS_Signal+0x2e>
    {
      pt = pt->next;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	60fb      	str	r3, [r7, #12]
    while (pt->blocked != semaPt)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d1f7      	bne.n	8004524 <OS_Signal+0x28>
    }
    
    pt->blocked = 0; // wake up this one
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800453a:	b662      	cpsie	i
}
 800453c:	bf00      	nop
  }
  
  __enable_irq();
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000ed8 	.word	0x20000ed8

08004550 <OS_FIFO_Init>:
// ******** OS_FIFO_Init ************
// Initialize FIFO.  
// One event thread producer, one main thread consumer
// Inputs:  none
// Outputs: none
void OS_FIFO_Init(void){
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  PutI = GetI = 0; // empty
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <OS_FIFO_Init+0x24>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <OS_FIFO_Init+0x24>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a06      	ldr	r2, [pc, #24]	; (8004578 <OS_FIFO_Init+0x28>)
 8004560:	6013      	str	r3, [r2, #0]
  OS_InitSemaphore(&CurrentSize, 0);
 8004562:	2100      	movs	r1, #0
 8004564:	4805      	ldr	r0, [pc, #20]	; (800457c <OS_FIFO_Init+0x2c>)
 8004566:	f7ff ff9b 	bl	80044a0 <OS_InitSemaphore>
  LostData = 0;
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <OS_FIFO_Init+0x30>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000eac 	.word	0x20000eac
 8004578:	20000e44 	.word	0x20000e44
 800457c:	20000e48 	.word	0x20000e48
 8004580:	20000e28 	.word	0x20000e28

08004584 <OS_FIFO_Put>:
// Put an entry in the FIFO.  
// Exactly one event thread puts,
// do not block or spin if full
// Inputs:  data to be stored
// Outputs: 0 if successful, -1 if the FIFO is full
int OS_FIFO_Put(uint32_t data){
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  if(CurrentSize == FSIZE)
 800458c:	4b13      	ldr	r3, [pc, #76]	; (80045dc <OS_FIFO_Put+0x58>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b0a      	cmp	r3, #10
 8004592:	d107      	bne.n	80045a4 <OS_FIFO_Put+0x20>
  {
    LostData++;
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <OS_FIFO_Put+0x5c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	4a11      	ldr	r2, [pc, #68]	; (80045e0 <OS_FIFO_Put+0x5c>)
 800459c:	6013      	str	r3, [r2, #0]
	return -1;	// full
 800459e:	f04f 33ff 	mov.w	r3, #4294967295
 80045a2:	e017      	b.n	80045d4 <OS_FIFO_Put+0x50>
  }
  else
  {
    Fifo[PutI] = data;	// put
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <OS_FIFO_Put+0x60>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	490f      	ldr	r1, [pc, #60]	; (80045e8 <OS_FIFO_Put+0x64>)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	PutI = (PutI + 1) % FSIZE;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <OS_FIFO_Put+0x60>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1c59      	adds	r1, r3, #1
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <OS_FIFO_Put+0x68>)
 80045b8:	fba3 2301 	umull	r2, r3, r3, r1
 80045bc:	08da      	lsrs	r2, r3, #3
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	1aca      	subs	r2, r1, r3
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <OS_FIFO_Put+0x60>)
 80045ca:	601a      	str	r2, [r3, #0]
	OS_Signal(&CurrentSize);
 80045cc:	4803      	ldr	r0, [pc, #12]	; (80045dc <OS_FIFO_Put+0x58>)
 80045ce:	f7ff ff95 	bl	80044fc <OS_Signal>
	return 0;   // success
 80045d2:	2300      	movs	r3, #0
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000e48 	.word	0x20000e48
 80045e0:	20000e28 	.word	0x20000e28
 80045e4:	20000e44 	.word	0x20000e44
 80045e8:	20000eb0 	.word	0x20000eb0
 80045ec:	cccccccd 	.word	0xcccccccd

080045f0 <OS_FIFO_Get>:
// Get an entry from the FIFO.   
// Exactly one main thread get,
// do block if empty
// Inputs:  none
// Outputs: data retrieved
uint32_t OS_FIFO_Get(void){
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
  uint32_t data;

  OS_Wait(&CurrentSize);		// block if empty
 80045f6:	480e      	ldr	r0, [pc, #56]	; (8004630 <OS_FIFO_Get+0x40>)
 80045f8:	f7ff ff60 	bl	80044bc <OS_Wait>
  data = Fifo[GetI];			// get
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <OS_FIFO_Get+0x44>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a0d      	ldr	r2, [pc, #52]	; (8004638 <OS_FIFO_Get+0x48>)
 8004602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004606:	607b      	str	r3, [r7, #4]
  GetI = (GetI + 1) % FSIZE;	// place to get next
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <OS_FIFO_Get+0x44>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <OS_FIFO_Get+0x4c>)
 8004610:	fba3 2301 	umull	r2, r3, r3, r1
 8004614:	08da      	lsrs	r2, r3, #3
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	1aca      	subs	r2, r1, r3
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <OS_FIFO_Get+0x44>)
 8004622:	601a      	str	r2, [r3, #0]

  return data;
 8004624:	687b      	ldr	r3, [r7, #4]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000e48 	.word	0x20000e48
 8004634:	20000eac 	.word	0x20000eac
 8004638:	20000eb0 	.word	0x20000eb0
 800463c:	cccccccd 	.word	0xcccccccd

08004640 <SysTick_Handler>:
 8004640:	b672      	cpsid	i
 8004642:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004646:	4808      	ldr	r0, [pc, #32]	; (8004668 <SysTick_Handler+0x28>)
 8004648:	6801      	ldr	r1, [r0, #0]
 800464a:	f8c1 d000 	str.w	sp, [r1]
 800464e:	b501      	push	{r0, lr}
 8004650:	f7ff fe72 	bl	8004338 <Scheduler>
 8004654:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8004658:	6801      	ldr	r1, [r0, #0]
 800465a:	f8d1 d000 	ldr.w	sp, [r1]
 800465e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004662:	b662      	cpsie	i
 8004664:	4770      	bx	lr
 8004666:	0000      	.short	0x0000
 8004668:	20000ed8 	.word	0x20000ed8

0800466c <StartOS>:
 800466c:	480a      	ldr	r0, [pc, #40]	; (8004698 <EndCritical+0x6>)
 800466e:	6801      	ldr	r1, [r0, #0]
 8004670:	f8d1 d000 	ldr.w	sp, [r1]
 8004674:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004678:	bc0f      	pop	{r0, r1, r2, r3}
 800467a:	f85d cb04 	ldr.w	ip, [sp], #4
 800467e:	b001      	add	sp, #4
 8004680:	f85d eb04 	ldr.w	lr, [sp], #4
 8004684:	b001      	add	sp, #4
 8004686:	b662      	cpsie	i
 8004688:	4770      	bx	lr

0800468a <StartCritical>:
 800468a:	f3ef 8010 	mrs	r0, PRIMASK
 800468e:	b672      	cpsid	i
 8004690:	4770      	bx	lr

08004692 <EndCritical>:
 8004692:	f380 8810 	msr	PRIMASK, r0
 8004696:	4770      	bx	lr
 8004698:	20000ed8 	.word	0x20000ed8

0800469c <__libc_init_array>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	4d0d      	ldr	r5, [pc, #52]	; (80046d4 <__libc_init_array+0x38>)
 80046a0:	4c0d      	ldr	r4, [pc, #52]	; (80046d8 <__libc_init_array+0x3c>)
 80046a2:	1b64      	subs	r4, r4, r5
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	2600      	movs	r6, #0
 80046a8:	42a6      	cmp	r6, r4
 80046aa:	d109      	bne.n	80046c0 <__libc_init_array+0x24>
 80046ac:	4d0b      	ldr	r5, [pc, #44]	; (80046dc <__libc_init_array+0x40>)
 80046ae:	4c0c      	ldr	r4, [pc, #48]	; (80046e0 <__libc_init_array+0x44>)
 80046b0:	f000 f820 	bl	80046f4 <_init>
 80046b4:	1b64      	subs	r4, r4, r5
 80046b6:	10a4      	asrs	r4, r4, #2
 80046b8:	2600      	movs	r6, #0
 80046ba:	42a6      	cmp	r6, r4
 80046bc:	d105      	bne.n	80046ca <__libc_init_array+0x2e>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c4:	4798      	blx	r3
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7ee      	b.n	80046a8 <__libc_init_array+0xc>
 80046ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ce:	4798      	blx	r3
 80046d0:	3601      	adds	r6, #1
 80046d2:	e7f2      	b.n	80046ba <__libc_init_array+0x1e>
 80046d4:	08004744 	.word	0x08004744
 80046d8:	08004744 	.word	0x08004744
 80046dc:	08004744 	.word	0x08004744
 80046e0:	08004748 	.word	0x08004748

080046e4 <memset>:
 80046e4:	4402      	add	r2, r0
 80046e6:	4603      	mov	r3, r0
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d100      	bne.n	80046ee <memset+0xa>
 80046ec:	4770      	bx	lr
 80046ee:	f803 1b01 	strb.w	r1, [r3], #1
 80046f2:	e7f9      	b.n	80046e8 <memset+0x4>

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
