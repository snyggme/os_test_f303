
os_test_f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eac  08003eac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eac  08003eac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e60  2000000c  08003ec0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e6c  08003ec0  00020e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f5a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025c2  00000000  00000000  00030f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00033558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  00034480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d9f3  00000000  00000000  00035290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d157  00000000  00000000  00052c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b005a  00000000  00000000  0005fdda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010fe34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  0010feb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e5c 	.word	0x08003e5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003e5c 	.word	0x08003e5c

080001c8 <SysTick_Handler>:
.global StartOS
.global SysTick_Handler

SysTick_Handler:
  /* Saves R0-R3,R12,LR,PC,PSR */
  cpsid   i
 80001c8:	b672      	cpsid	i
  /* Prevent interrupt during switch */
  push    {r4-r11}
 80001ca:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  /* Save remaining regs r4-11 */
  ldr     r0, =RunPt
 80001ce:	4813      	ldr	r0, [pc, #76]	; (800021c <EndCritical+0x8>)
  /* R0=pointer to RunPt, old thread */
  LDR     R1, [R0]
 80001d0:	6801      	ldr	r1, [r0, #0]
  /* R1 = RunPt */
  STR     SP, [R1]
 80001d2:	f8c1 d000 	str.w	sp, [r1]
  /* Save SP into TCB */
/*  LDR     R1, [R1,#4]*/
  /* R1 = RunPt->next */
  /*STR     R1, [R0]*/
  /* RunPt = R1 */
  PUSH	  {R0,LR}
 80001d6:	b501      	push	{r0, lr}
  BL	  Scheduler
 80001d8:	f003 fd9c 	bl	8003d14 <Scheduler>
  POP	  {R0,LR}
 80001dc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
  LDR	  R1, [R0]
 80001e0:	6801      	ldr	r1, [r0, #0]
  /* R1 = RunPt, new thread */
  LDR     SP, [R1]
 80001e2:	f8d1 d000 	ldr.w	sp, [r1]
  /* new thread SP; SP = RunPt->sp; */
  POP     {R4-R11}
 80001e6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  /* restore regs r4-11 */
  CPSIE   I
 80001ea:	b662      	cpsie	i
  /* tasks run with interrupts enabled */
  BX      LR
 80001ec:	4770      	bx	lr

080001ee <StartOS>:
  /*restore R0-R3,R12,LR,PC,PSR */

StartOS:
  LDR     R0, =RunPt
 80001ee:	480b      	ldr	r0, [pc, #44]	; (800021c <EndCritical+0x8>)
  /* currently running thread */
  LDR     R1, [R0]
 80001f0:	6801      	ldr	r1, [r0, #0]
  /* R2 = value of RunPt */
  LDR     SP, [R1]
 80001f2:	f8d1 d000 	ldr.w	sp, [r1]
  /* new thread SP; SP = RunPt->stackPointer; */
  POP     {R4-R11}
 80001f6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  /* restore regs r4-11 */
  POP     {R0-R3}
 80001fa:	bc0f      	pop	{r0, r1, r2, r3}
  /* restore regs r0-3 */
  POP     {R12}
 80001fc:	f85d cb04 	ldr.w	ip, [sp], #4
  /*  */
  ADD     SP,SP,#4
 8000200:	b001      	add	sp, #4
  /* discard LR from initial stack */
  POP     {LR}
 8000202:	f85d eb04 	ldr.w	lr, [sp], #4
  /* start location */
  ADD     SP,SP,#4
 8000206:	b001      	add	sp, #4
  /* discard PSR */
  CPSIE   I
 8000208:	b662      	cpsie	i
  /* Enable interrupts at processor level */
  BX      LR
 800020a:	4770      	bx	lr

0800020c <StartCritical>:
; make a copy of previous I bit, disable interrupts
; inputs:  none
; outputs: previous I bit
*/
StartCritical:
  MRS R0, PRIMASK
 800020c:	f3ef 8010 	mrs	r0, PRIMASK
  /* save old status */
  CPSID I
 8000210:	b672      	cpsid	i
  /* mask all (except faults) */
  BX LR
 8000212:	4770      	bx	lr

08000214 <EndCritical>:
; using the copy of previous I bit, restore I bit to previous value
; inputs:  previous I bit
; outputs: none
*/
EndCritical:
  MSR PRIMASK, R0
 8000214:	f380 8810 	msr	PRIMASK, r0
  BX LR
 8000218:	4770      	bx	lr
 800021a:	0000      	.short	0x0000
  ldr     r0, =RunPt
 800021c:	20000e68 	.word	0x20000e68

08000220 <Delay_ms>:
	asm("BNE parrotdelay \n");
	asm("BX LR");
}

void Delay_ms(uint32_t n)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<1000;i++)for(uint32_t j=0;j<1000;j++)__NOP();
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
 800022c:	e00d      	b.n	800024a <Delay_ms+0x2a>
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	e003      	b.n	800023c <Delay_ms+0x1c>
 8000234:	bf00      	nop
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	3301      	adds	r3, #1
 800023a:	60bb      	str	r3, [r7, #8]
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000242:	d3f7      	bcc.n	8000234 <Delay_ms+0x14>
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000250:	d3ed      	bcc.n	800022e <Delay_ms+0xe>
//	while(n)
//	{
//		parrotdelay(23746);
//		n--;
//	}
}
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
	...

08000260 <TaskA>:

void TaskA(void){ // producer
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  CountA = 0;
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <TaskA+0x2c>)
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
  while(1){
    CountA++;
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <TaskA+0x2c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <TaskA+0x2c>)
 8000272:	6013      	str	r3, [r2, #0]
//    Profile_Toggle0();
    OS_Signal(&sAB);  // TaskB can proceed
 8000274:	4806      	ldr	r0, [pc, #24]	; (8000290 <TaskA+0x30>)
 8000276:	f003 fd9d 	bl	8003db4 <OS_Signal>
    HAL_GPIO_TogglePin(GPIOE, LD3_Pin);
 800027a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <TaskA+0x34>)
 8000280:	f000 ffa2 	bl	80011c8 <HAL_GPIO_TogglePin>
    Delay_ms(2);  // important: actual delay is multiplied by number of unblocked threads (expect 3)
 8000284:	2002      	movs	r0, #2
 8000286:	f7ff ffcb 	bl	8000220 <Delay_ms>
    CountA++;
 800028a:	e7ee      	b.n	800026a <TaskA+0xa>
 800028c:	200000f0 	.word	0x200000f0
 8000290:	20000080 	.word	0x20000080
 8000294:	48001000 	.word	0x48001000

08000298 <TaskB>:
  }
}
void TaskB(void){ // consumer
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  CountB = 0;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <TaskB+0x28>)
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
  while(1){
    CountB++;
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <TaskB+0x28>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <TaskB+0x28>)
 80002aa:	6013      	str	r3, [r2, #0]
    OS_Wait(&sAB);  // signaled by TaskA
 80002ac:	4805      	ldr	r0, [pc, #20]	; (80002c4 <TaskB+0x2c>)
 80002ae:	f003 fd65 	bl	8003d7c <OS_Wait>
    HAL_GPIO_TogglePin(GPIOE, LD4_Pin);
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	4804      	ldr	r0, [pc, #16]	; (80002c8 <TaskB+0x30>)
 80002b8:	f000 ff86 	bl	80011c8 <HAL_GPIO_TogglePin>
    CountB++;
 80002bc:	e7f1      	b.n	80002a2 <TaskB+0xa>
 80002be:	bf00      	nop
 80002c0:	2000007c 	.word	0x2000007c
 80002c4:	20000080 	.word	0x20000080
 80002c8:	48001000 	.word	0x48001000

080002cc <TaskC>:
//    Profile_Toggle1();
  }
}
void TaskC(void){ // producer
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  CountC = 0;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <TaskC+0x28>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
  while(1){
    CountC++;
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <TaskC+0x28>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <TaskC+0x28>)
 80002de:	6013      	str	r3, [r2, #0]
//    Profile_Toggle2();
    OS_Signal(&sCD);  // TaskD can proceed
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <TaskC+0x2c>)
 80002e2:	f003 fd67 	bl	8003db4 <OS_Signal>
    HAL_GPIO_TogglePin(GPIOE, LD5_Pin);
 80002e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ea:	4804      	ldr	r0, [pc, #16]	; (80002fc <TaskC+0x30>)
 80002ec:	f000 ff6c 	bl	80011c8 <HAL_GPIO_TogglePin>
    CountC++;
 80002f0:	e7f1      	b.n	80002d6 <TaskC+0xa>
 80002f2:	bf00      	nop
 80002f4:	20000468 	.word	0x20000468
 80002f8:	20000074 	.word	0x20000074
 80002fc:	48001000 	.word	0x48001000

08000300 <TaskD>:
//    Delay_ms(20); // important: actual delay is multiplied by number of unblocked threads (expect 3)
  }
}
void TaskD(void){ // consumer
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  CountD = 0;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <TaskD+0x28>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
  while(1){
    CountD++;
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <TaskD+0x28>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	3301      	adds	r3, #1
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <TaskD+0x28>)
 8000312:	6013      	str	r3, [r2, #0]
    OS_Wait(&sCD);  // signaled by TaskC
 8000314:	4805      	ldr	r0, [pc, #20]	; (800032c <TaskD+0x2c>)
 8000316:	f003 fd31 	bl	8003d7c <OS_Wait>
    HAL_GPIO_TogglePin(GPIOE, LD6_Pin);
 800031a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <TaskD+0x30>)
 8000320:	f000 ff52 	bl	80011c8 <HAL_GPIO_TogglePin>
    CountD++;
 8000324:	e7f1      	b.n	800030a <TaskD+0xa>
 8000326:	bf00      	nop
 8000328:	20000088 	.word	0x20000088
 800032c:	20000074 	.word	0x20000074
 8000330:	48001000 	.word	0x48001000

08000334 <TaskE>:
//    Profile_Toggle3();
  }
}
void TaskE(void){ // producer
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  CountE = 0;
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <TaskE+0x28>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
  while(1){
    CountE++;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <TaskE+0x28>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	4a05      	ldr	r2, [pc, #20]	; (800035c <TaskE+0x28>)
 8000346:	6013      	str	r3, [r2, #0]
//    Profile_Toggle4();
    OS_Signal(&sEF);  // TaskF can proceed
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <TaskE+0x2c>)
 800034a:	f003 fd33 	bl	8003db4 <OS_Signal>
    HAL_GPIO_TogglePin(GPIOE, LD7_Pin);
 800034e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000352:	4804      	ldr	r0, [pc, #16]	; (8000364 <TaskE+0x30>)
 8000354:	f000 ff38 	bl	80011c8 <HAL_GPIO_TogglePin>
    CountE++;
 8000358:	e7f1      	b.n	800033e <TaskE+0xa>
 800035a:	bf00      	nop
 800035c:	20000078 	.word	0x20000078
 8000360:	20000084 	.word	0x20000084
 8000364:	48001000 	.word	0x48001000

08000368 <TaskF>:
//    Delay_ms(200);// important: actual delay is multiplied by number of unblocked threads (expect 3)
  }
}
void TaskF(void){ // consumer
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  CountF = 0;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <TaskF+0x28>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
  while(1){
    CountF++;
 8000372:	4b07      	ldr	r3, [pc, #28]	; (8000390 <TaskF+0x28>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	3301      	adds	r3, #1
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <TaskF+0x28>)
 800037a:	6013      	str	r3, [r2, #0]
    OS_Wait(&sEF);  // signaled by TaskE
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <TaskF+0x2c>)
 800037e:	f003 fcfd 	bl	8003d7c <OS_Wait>
    HAL_GPIO_TogglePin(GPIOE, LD8_Pin);
 8000382:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000386:	4804      	ldr	r0, [pc, #16]	; (8000398 <TaskF+0x30>)
 8000388:	f000 ff1e 	bl	80011c8 <HAL_GPIO_TogglePin>
    CountF++;
 800038c:	e7f1      	b.n	8000372 <TaskF+0xa>
 800038e:	bf00      	nop
 8000390:	20000178 	.word	0x20000178
 8000394:	20000084 	.word	0x20000084
 8000398:	48001000 	.word	0x48001000

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 fba9 	bl	8000af8 <HAL_Init>

  /* USER CODE BEGIN Init */
  OS_Init();
 80003a6:	f003 fb5f 	bl	8003a68 <OS_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003aa:	f000 f845 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ae:	f000 f975 	bl	800069c <MX_GPIO_Init>
  MX_I2C1_Init();
 80003b2:	f000 f8a3 	bl	80004fc <MX_I2C1_Init>
  MX_SPI1_Init();
 80003b6:	f000 f8e1 	bl	800057c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80003ba:	f000 f94d 	bl	8000658 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80003be:	f000 f91b 	bl	80005f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  OS_InitSemaphore(&sAB, 0);
 80003c2:	2100      	movs	r1, #0
 80003c4:	4811      	ldr	r0, [pc, #68]	; (800040c <main+0x70>)
 80003c6:	f003 fcca 	bl	8003d5e <OS_InitSemaphore>
  OS_InitSemaphore(&sCD, 0);
 80003ca:	2100      	movs	r1, #0
 80003cc:	4810      	ldr	r0, [pc, #64]	; (8000410 <main+0x74>)
 80003ce:	f003 fcc6 	bl	8003d5e <OS_InitSemaphore>
  OS_InitSemaphore(&sEF, 0);
 80003d2:	2100      	movs	r1, #0
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <main+0x78>)
 80003d6:	f003 fcc2 	bl	8003d5e <OS_InitSemaphore>
//
  OS_AddThreads(&TaskA, &TaskB, &TaskC, &TaskD, &TaskE, &TaskF);
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <main+0x7c>)
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <main+0x80>)
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <main+0x84>)
 80003e4:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <main+0x88>)
 80003e6:	4910      	ldr	r1, [pc, #64]	; (8000428 <main+0x8c>)
 80003e8:	4810      	ldr	r0, [pc, #64]	; (800042c <main+0x90>)
 80003ea:	f003 fc15 	bl	8003c18 <OS_AddThreads>
//
  OS_Launch(SystemCoreClock / 1000U);
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <main+0x94>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a10      	ldr	r2, [pc, #64]	; (8000434 <main+0x98>)
 80003f4:	fba2 2303 	umull	r2, r3, r2, r3
 80003f8:	099b      	lsrs	r3, r3, #6
 80003fa:	4618      	mov	r0, r3
 80003fc:	f003 fc7c 	bl	8003cf8 <OS_Launch>
  while (1)
  {

	  //PE12
//	  HAL_GPIO_TogglePin(GPIOE, LD7_Pin);
	  Delay_ms(1000);
 8000400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000404:	f7ff ff0c 	bl	8000220 <Delay_ms>
 8000408:	e7fa      	b.n	8000400 <main+0x64>
 800040a:	bf00      	nop
 800040c:	20000080 	.word	0x20000080
 8000410:	20000074 	.word	0x20000074
 8000414:	20000084 	.word	0x20000084
 8000418:	08000369 	.word	0x08000369
 800041c:	08000335 	.word	0x08000335
 8000420:	08000301 	.word	0x08000301
 8000424:	080002cd 	.word	0x080002cd
 8000428:	08000299 	.word	0x08000299
 800042c:	08000261 	.word	0x08000261
 8000430:	20000000 	.word	0x20000000
 8000434:	10624dd3 	.word	0x10624dd3

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b09e      	sub	sp, #120	; 0x78
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000442:	2228      	movs	r2, #40	; 0x28
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f003 fd00 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	463b      	mov	r3, r7
 800045e:	223c      	movs	r2, #60	; 0x3c
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fcf2 	bl	8003e4c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000468:	2303      	movs	r3, #3
 800046a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800046c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000470:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	2310      	movs	r3, #16
 800047c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000486:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000488:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800048c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000492:	4618      	mov	r0, r3
 8000494:	f001 f8b6 	bl	8001604 <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800049e:	f000 f97d 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	2302      	movs	r3, #2
 80004a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004bc:	2102      	movs	r1, #2
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 ffa8 	bl	8002414 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004ca:	f000 f967 	bl	800079c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <SystemClock_Config+0xc0>)
 80004d0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004da:	2300      	movs	r3, #0
 80004dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004de:	463b      	mov	r3, r7
 80004e0:	4618      	mov	r0, r3
 80004e2:	f002 f9cd 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80004ec:	f000 f956 	bl	800079c <Error_Handler>
  }
}
 80004f0:	bf00      	nop
 80004f2:	3778      	adds	r7, #120	; 0x78
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	00020022 	.word	0x00020022

080004fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_I2C1_Init+0x74>)
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <MX_I2C1_Init+0x78>)
 8000504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_I2C1_Init+0x74>)
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <MX_I2C1_Init+0x7c>)
 800050a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_I2C1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_I2C1_Init+0x74>)
 8000514:	2201      	movs	r2, #1
 8000516:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_I2C1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_I2C1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_I2C1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_I2C1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000536:	480e      	ldr	r0, [pc, #56]	; (8000570 <MX_I2C1_Init+0x74>)
 8000538:	f000 fe60 	bl	80011fc <HAL_I2C_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000542:	f000 f92b 	bl	800079c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000546:	2100      	movs	r1, #0
 8000548:	4809      	ldr	r0, [pc, #36]	; (8000570 <MX_I2C1_Init+0x74>)
 800054a:	f000 fee6 	bl	800131a <HAL_I2CEx_ConfigAnalogFilter>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000554:	f000 f922 	bl	800079c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000558:	2100      	movs	r1, #0
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_I2C1_Init+0x74>)
 800055c:	f000 ff28 	bl	80013b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000566:	f000 f919 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028
 8000574:	40005400 	.word	0x40005400
 8000578:	2000090e 	.word	0x2000090e

0800057c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_SPI1_Init+0x78>)
 8000584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800058c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000596:	f44f 7240 	mov.w	r2, #768	; 0x300
 800059a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_SPI1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005ca:	2207      	movs	r2, #7
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005dc:	f002 fb00 	bl	8002be0 <HAL_SPI_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 f8d9 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000008c 	.word	0x2000008c
 80005f4:	40013000 	.word	0x40013000

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_USART2_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <MX_USART2_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800063c:	f002 fb7b 	bl	8002d36 <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f8a9 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000f4 	.word	0x200000f4
 8000654:	40004400 	.word	0x40004400

08000658 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_USB_PCD_Init+0x3c>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <MX_USB_PCD_Init+0x40>)
 8000660:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USB_PCD_Init+0x3c>)
 8000664:	2208      	movs	r2, #8
 8000666:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_USB_PCD_Init+0x3c>)
 800066a:	2202      	movs	r2, #2
 800066c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USB_PCD_Init+0x3c>)
 8000670:	2202      	movs	r2, #2
 8000672:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_USB_PCD_Init+0x3c>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USB_PCD_Init+0x3c>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_USB_PCD_Init+0x3c>)
 8000682:	f000 fee1 	bl	8001448 <HAL_PCD_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800068c:	f000 f886 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000017c 	.word	0x2000017c
 8000698:	40005c00 	.word	0x40005c00

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a30      	ldr	r2, [pc, #192]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800072a:	2200      	movs	r2, #0
 800072c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000730:	4818      	ldr	r0, [pc, #96]	; (8000794 <MX_GPIO_Init+0xf8>)
 8000732:	f000 fd31 	bl	8001198 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8000736:	2337      	movs	r3, #55	; 0x37
 8000738:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_GPIO_Init+0xfc>)
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0xf8>)
 800074a:	f000 fbab 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800074e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000752:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xf8>)
 8000768:	f000 fb9c 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f000 fb8f 	bl	8000ea4 <HAL_GPIO_Init>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000
 8000794:	48001000 	.word	0x48001000
 8000798:	10120000 	.word	0x10120000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x44>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007e2:	2007      	movs	r0, #7
 80007e4:	f000 faa6 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_I2C_MspInit+0x7c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d127      	bne.n	8000866 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_I2C_MspInit+0x80>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <HAL_I2C_MspInit+0x80>)
 800081c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_I2C_MspInit+0x80>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800082e:	23c0      	movs	r3, #192	; 0xc0
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000832:	2312      	movs	r3, #18
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000836:	2301      	movs	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083e:	2304      	movs	r3, #4
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <HAL_I2C_MspInit+0x84>)
 800084a:	f000 fb2b 	bl	8000ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_I2C_MspInit+0x80>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_I2C_MspInit+0x80>)
 8000854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_I2C_MspInit+0x80>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40005400 	.word	0x40005400
 8000874:	40021000 	.word	0x40021000
 8000878:	48000400 	.word	0x48000400

0800087c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <HAL_SPI_MspInit+0x7c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d128      	bne.n	80008f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_SPI_MspInit+0x80>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80008ce:	23e0      	movs	r3, #224	; 0xe0
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008de:	2305      	movs	r3, #5
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fada 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013000 	.word	0x40013000
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <HAL_UART_MspInit+0x8c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d130      	bne.n	8000984 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a1a      	ldr	r2, [pc, #104]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_UART_MspInit+0x90>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000962:	2307      	movs	r3, #7
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f000 fa98 	bl	8000ea4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2026      	movs	r0, #38	; 0x26
 800097a:	f000 f9e6 	bl	8000d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800097e:	2026      	movs	r0, #38	; 0x26
 8000980:	f000 f9ff 	bl	8000d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40004400 	.word	0x40004400
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <HAL_PCD_MspInit+0x80>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d129      	bne.n	8000a0a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_PCD_MspInit+0x84>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_PCD_MspInit+0x84>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_PCD_MspInit+0x84>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009e0:	230e      	movs	r3, #14
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f000 fa59 	bl	8000ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_PCD_MspInit+0x84>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_PCD_MspInit+0x84>)
 80009f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_PCD_MspInit+0x84>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40005c00 	.word	0x40005c00
 8000a18:	40021000 	.word	0x40021000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <USART2_IRQHandler+0x10>)
 8000a72:	f002 f9af 	bl	8002dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000f4 	.word	0x200000f4

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490e      	ldr	r1, [pc, #56]	; (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0b      	ldr	r4, [pc, #44]	; (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ace:	f7ff ffd7 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f003 f997 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad6:	f7ff fc61 	bl	800039c <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000adc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae8:	08003eb4 	.word	0x08003eb4
  ldr r2, =_sbss
 8000aec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af0:	20000e6c 	.word	0x20000e6c

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_Init+0x20>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <HAL_Init+0x20>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f913 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
//  HAL_InitTick(TICK_INT_PRIORITY);

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0e:	f7ff fe4d 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40022000 	.word	0x40022000

08000b1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f92f 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f000 f8f7 	bl	8000d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	2000046c 	.word	0x2000046c

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff29 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff3e 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff8e 	bl	8000c88 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5d 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff31 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffa2 	bl	8000cf0 <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d008      	beq.n	8000dda <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2204      	movs	r2, #4
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e020      	b.n	8000e1c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 020e 	bic.w	r2, r2, #14
 8000de8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d005      	beq.n	8000e4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2204      	movs	r2, #4
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e027      	b.n	8000e9a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 020e 	bic.w	r2, r2, #14
 8000e58:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0201 	bic.w	r2, r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	4798      	blx	r3
    } 
  }
  return status;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e154      	b.n	800115e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8146 	beq.w	8001158 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d00b      	beq.n	8000eec <HAL_GPIO_Init+0x48>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d007      	beq.n	8000eec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	2b11      	cmp	r3, #17
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b12      	cmp	r3, #18
 8000eea:	d130      	bne.n	8000f4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f22:	2201      	movs	r2, #1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	f003 0201 	and.w	r2, r3, #1
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0xea>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b12      	cmp	r3, #18
 8000f8c:	d123      	bne.n	8000fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	6939      	ldr	r1, [r7, #16]
 8000fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0203 	and.w	r2, r3, #3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 80a0 	beq.w	8001158 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b58      	ldr	r3, [pc, #352]	; (800117c <HAL_GPIO_Init+0x2d8>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a57      	ldr	r2, [pc, #348]	; (800117c <HAL_GPIO_Init+0x2d8>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b55      	ldr	r3, [pc, #340]	; (800117c <HAL_GPIO_Init+0x2d8>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001030:	4a53      	ldr	r2, [pc, #332]	; (8001180 <HAL_GPIO_Init+0x2dc>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800105a:	d019      	beq.n	8001090 <HAL_GPIO_Init+0x1ec>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a49      	ldr	r2, [pc, #292]	; (8001184 <HAL_GPIO_Init+0x2e0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x1e8>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2e4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x1e4>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a47      	ldr	r2, [pc, #284]	; (800118c <HAL_GPIO_Init+0x2e8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x1e0>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a46      	ldr	r2, [pc, #280]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x1dc>
 800107c:	2304      	movs	r3, #4
 800107e:	e008      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001080:	2305      	movs	r3, #5
 8001082:	e006      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001084:	2303      	movs	r3, #3
 8001086:	e004      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001088:	2302      	movs	r3, #2
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001090:	2300      	movs	r3, #0
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	f002 0203 	and.w	r2, r2, #3
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	4093      	lsls	r3, r2
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a2:	4937      	ldr	r1, [pc, #220]	; (8001180 <HAL_GPIO_Init+0x2dc>)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b0:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d4:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010fe:	4a25      	ldr	r2, [pc, #148]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001128:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	f47f aea3 	bne.w	8000eb4 <HAL_GPIO_Init+0x10>
  }
}
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800
 800118c:	48000c00 	.word	0x48000c00
 8001190:	48001000 	.word	0x48001000
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4013      	ands	r3, r2
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43d9      	mvns	r1, r3
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	400b      	ands	r3, r1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e081      	b.n	8001312 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fae6 	bl	80007f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2224      	movs	r2, #36	; 0x24
 800122c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800124c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800125c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	e006      	b.n	8001284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d104      	bne.n	8001296 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	ea42 0103 	orr.w	r1, r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	021a      	lsls	r2, r3, #8
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69d9      	ldr	r1, [r3, #28]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1a      	ldr	r2, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b20      	cmp	r3, #32
 800132e:	d138      	bne.n	80013a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800133a:	2302      	movs	r3, #2
 800133c:	e032      	b.n	80013a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2224      	movs	r2, #36	; 0x24
 800134a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800136c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013a2:	2302      	movs	r3, #2
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d139      	bne.n	800143a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e033      	b.n	800143c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001402:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2220      	movs	r2, #32
 800142a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800143a:	2302      	movs	r3, #2
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	b08b      	sub	sp, #44	; 0x2c
 800144c:	af06      	add	r7, sp, #24
 800144e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0d0      	b.n	80015fc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fa90 	bl	8000994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fa68 	bl	8003956 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e04c      	b.n	8001526 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	3301      	adds	r3, #1
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	b298      	uxth	r0, r3
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	3336      	adds	r3, #54	; 0x36
 80014ca:	4602      	mov	r2, r0
 80014cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	3303      	adds	r3, #3
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3338      	adds	r3, #56	; 0x38
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	333c      	adds	r3, #60	; 0x3c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	3340      	adds	r3, #64	; 0x40
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3ad      	bcc.n	800148c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e044      	b.n	80015c0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3b5      	bcc.n	8001536 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	687e      	ldr	r6, [r7, #4]
 80015d2:	466d      	mov	r5, sp
 80015d4:	f106 0410 	add.w	r4, r6, #16
 80015d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	602b      	str	r3, [r5, #0]
 80015e0:	1d33      	adds	r3, r6, #4
 80015e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f002 f9d1 	bl	800398c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800160a:	af00      	add	r7, sp, #0
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	f000 bef4 	b.w	8002406 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 816a 	beq.w	8001902 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800162e:	4bb3      	ldr	r3, [pc, #716]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b04      	cmp	r3, #4
 8001638:	d00c      	beq.n	8001654 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800163a:	4bb0      	ldr	r3, [pc, #704]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d159      	bne.n	80016fa <HAL_RCC_OscConfig+0xf6>
 8001646:	4bad      	ldr	r3, [pc, #692]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001652:	d152      	bne.n	80016fa <HAL_RCC_OscConfig+0xf6>
 8001654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001658:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001668:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <HAL_RCC_OscConfig+0x82>
 8001680:	4b9e      	ldr	r3, [pc, #632]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0xae>
 8001686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800169a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016ae:	4b93      	ldr	r3, [pc, #588]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016be:	fa92 f2a2 	rbit	r2, r2
 80016c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016ca:	fab2 f282 	clz	r2, r2
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	f042 0220 	orr.w	r2, r2, #32
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	f002 021f 	and.w	r2, r2, #31
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 810c 	beq.w	8001900 <HAL_RCC_OscConfig+0x2fc>
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 8106 	bne.w	8001900 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f000 be86 	b.w	8002406 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x110>
 8001706:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7c      	ldr	r2, [pc, #496]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e030      	b.n	8001776 <HAL_RCC_OscConfig+0x172>
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x134>
 800171e:	4b77      	ldr	r3, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a76      	ldr	r2, [pc, #472]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b74      	ldr	r3, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a73      	ldr	r2, [pc, #460]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01e      	b.n	8001776 <HAL_RCC_OscConfig+0x172>
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001742:	d10c      	bne.n	800175e <HAL_RCC_OscConfig+0x15a>
 8001744:	4b6d      	ldr	r3, [pc, #436]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a6c      	ldr	r2, [pc, #432]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 800174a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a69      	ldr	r2, [pc, #420]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0x172>
 800175e:	4b67      	ldr	r3, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a66      	ldr	r2, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a63      	ldr	r2, [pc, #396]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001776:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	f023 020f 	bic.w	r2, r3, #15
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	495d      	ldr	r1, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001786:	4313      	orrs	r3, r2
 8001788:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d059      	beq.n	8001848 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff f9f2 	bl	8000b7c <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff f9ed 	bl	8000b7c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d902      	bls.n	80017b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f000 be29 	b.w	8002406 <HAL_RCC_OscConfig+0xe02>
 80017b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0x1e2>
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x20e>
 80017e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001802:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001816:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800181a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800181e:	fa92 f2a2 	rbit	r2, r2
 8001822:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001826:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800182a:	fab2 f282 	clz	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f002 021f 	and.w	r2, r2, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0ab      	beq.n	800179e <HAL_RCC_OscConfig+0x19a>
 8001846:	e05c      	b.n	8001902 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff f998 	bl	8000b7c <HAL_GetTick>
 800184c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001852:	f7ff f993 	bl	8000b7c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d902      	bls.n	8001868 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	f000 bdcf 	b.w	8002406 <HAL_RCC_OscConfig+0xe02>
 8001868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800187c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d102      	bne.n	800189a <HAL_RCC_OscConfig+0x296>
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0x2c2>
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_RCC_OscConfig+0x2f8>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018d2:	fa92 f2a2 	rbit	r2, r2
 80018d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ab      	bne.n	8001852 <HAL_RCC_OscConfig+0x24e>
 80018fa:	e002      	b.n	8001902 <HAL_RCC_OscConfig+0x2fe>
 80018fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 816f 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001912:	4bd0      	ldr	r3, [pc, #832]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800191e:	4bcd      	ldr	r3, [pc, #820]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b08      	cmp	r3, #8
 8001928:	d16c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x400>
 800192a:	4bca      	ldr	r3, [pc, #808]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d166      	bne.n	8001a04 <HAL_RCC_OscConfig+0x400>
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001948:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d102      	bne.n	8001966 <HAL_RCC_OscConfig+0x362>
 8001960:	4bbc      	ldr	r3, [pc, #752]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	e013      	b.n	800198e <HAL_RCC_OscConfig+0x38a>
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800197e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800198a:	4bb2      	ldr	r3, [pc, #712]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2202      	movs	r2, #2
 8001990:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001994:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001998:	fa92 f2a2 	rbit	r2, r2
 800199c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019a4:	fab2 f282 	clz	r2, r2
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f042 0220 	orr.w	r2, r2, #32
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f002 021f 	and.w	r2, r2, #31
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_RCC_OscConfig+0x3cc>
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f000 bd1b 	b.w	8002406 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4ba0      	ldr	r3, [pc, #640]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	21f8      	movs	r1, #248	; 0xf8
 80019e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019e8:	fa91 f1a1 	rbit	r1, r1
 80019ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019f4:	fab1 f181 	clz	r1, r1
 80019f8:	b2c9      	uxtb	r1, r1
 80019fa:	408b      	lsls	r3, r1
 80019fc:	4995      	ldr	r1, [pc, #596]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	e0f5      	b.n	8001bf0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8085 	beq.w	8001b1a <HAL_RCC_OscConfig+0x516>
 8001a10:	2301      	movs	r3, #1
 8001a12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	461a      	mov	r2, r3
 8001a38:	2301      	movs	r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f89e 	bl	8000b7c <HAL_GetTick>
 8001a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff f899 	bl	8000b7c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d902      	bls.n	8001a5c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	f000 bcd5 	b.w	8002406 <HAL_RCC_OscConfig+0xe02>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d102      	bne.n	8001a8c <HAL_RCC_OscConfig+0x488>
 8001a86:	4b73      	ldr	r3, [pc, #460]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e013      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4b0>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001aa4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001aba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001abe:	fa92 f2a2 	rbit	r2, r2
 8001ac2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ac6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001aca:	fab2 f282 	clz	r2, r2
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f002 021f 	and.w	r2, r2, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0af      	beq.n	8001a46 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	21f8      	movs	r1, #248	; 0xf8
 8001af6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001afe:	fa91 f1a1 	rbit	r1, r1
 8001b02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b0a:	fab1 f181 	clz	r1, r1
 8001b0e:	b2c9      	uxtb	r1, r1
 8001b10:	408b      	lsls	r3, r1
 8001b12:	4950      	ldr	r1, [pc, #320]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e06a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x5ec>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	461a      	mov	r2, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff f819 	bl	8000b7c <HAL_GetTick>
 8001b4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f814 	bl	8000b7c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d902      	bls.n	8001b66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f000 bc50 	b.w	8002406 <HAL_RCC_OscConfig+0xe02>
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d102      	bne.n	8001b96 <HAL_RCC_OscConfig+0x592>
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e013      	b.n	8001bbe <HAL_RCC_OscConfig+0x5ba>
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_RCC_OscConfig+0x650>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001bc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bc8:	fa92 f2a2 	rbit	r2, r2
 8001bcc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bd0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bd4:	fab2 f282 	clz	r2, r2
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f042 0220 	orr.w	r2, r2, #32
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f002 021f 	and.w	r2, r2, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1af      	bne.n	8001b50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80da 	beq.w	8001db4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d069      	beq.n	8001cde <HAL_RCC_OscConfig+0x6da>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_OscConfig+0x654>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2301      	movs	r3, #1
 8001c32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7fe ffa2 	bl	8000b7c <HAL_GetTick>
 8001c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3c:	e00e      	b.n	8001c5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7fe ff9d 	bl	8000b7c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d906      	bls.n	8001c5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e3d9      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	10908120 	.word	0x10908120
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c72:	2202      	movs	r2, #2
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4ba5      	ldr	r3, [pc, #660]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	6019      	str	r1, [r3, #0]
 8001caa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fa93 f1a3 	rbit	r1, r3
 8001cb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cb8:	6019      	str	r1, [r3, #0]
  return result;
 8001cba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0b0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x63a>
 8001cdc:	e06a      	b.n	8001db4 <HAL_RCC_OscConfig+0x7b0>
 8001cde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f2a3 	rbit	r2, r3
 8001cf0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cf4:	601a      	str	r2, [r3, #0]
  return result;
 8001cf6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cfa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b8c      	ldr	r3, [pc, #560]	; (8001f38 <HAL_RCC_OscConfig+0x934>)
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7fe ff34 	bl	8000b7c <HAL_GetTick>
 8001d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e009      	b.n	8001d2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7fe ff2f 	bl	8000b7c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e36b      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
 8001d2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d62:	2202      	movs	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d76:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d7e:	2102      	movs	r1, #2
 8001d80:	6019      	str	r1, [r3, #0]
 8001d82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f1a3 	rbit	r1, r3
 8001d8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d90:	6019      	str	r1, [r3, #0]
  return result;
 8001d92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1b2      	bne.n	8001d1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8158 	beq.w	8002074 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a56      	ldr	r2, [pc, #344]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <HAL_RCC_OscConfig+0x938>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11a      	bne.n	8001e3e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e08:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <HAL_RCC_OscConfig+0x938>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	; (8001f3c <HAL_RCC_OscConfig+0x938>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e14:	f7fe feb2 	bl	8000b7c <HAL_GetTick>
 8001e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7fe fead 	bl	8000b7c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e2e9      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b42      	ldr	r3, [pc, #264]	; (8001f3c <HAL_RCC_OscConfig+0x938>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ef      	beq.n	8001e1e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x852>
 8001e48:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a39      	ldr	r2, [pc, #228]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e02f      	b.n	8001eb6 <HAL_RCC_OscConfig+0x8b2>
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x876>
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a33      	ldr	r2, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e72:	f023 0304 	bic.w	r3, r3, #4
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e01d      	b.n	8001eb6 <HAL_RCC_OscConfig+0x8b2>
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x89a>
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x8b2>
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a24      	ldr	r2, [pc, #144]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6213      	str	r3, [r2, #32]
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d06b      	beq.n	8001f98 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fe5c 	bl	8000b7c <HAL_GetTick>
 8001ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe fe57 	bl	8000b7c <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e291      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
 8001ee2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001efe:	2202      	movs	r2, #2
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fa93 f2a3 	rbit	r2, r3
 8001f0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f10:	601a      	str	r2, [r3, #0]
  return result;
 8001f12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d109      	bne.n	8001f40 <HAL_RCC_OscConfig+0x93c>
 8001f2c:	4b01      	ldr	r3, [pc, #4]	; (8001f34 <HAL_RCC_OscConfig+0x930>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x958>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	10908120 	.word	0x10908120
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f44:	2202      	movs	r2, #2
 8001f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	fa93 f2a3 	rbit	r2, r3
 8001f52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4bbb      	ldr	r3, [pc, #748]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f60:	2102      	movs	r1, #2
 8001f62:	6011      	str	r1, [r2, #0]
 8001f64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	fa92 f1a2 	rbit	r1, r2
 8001f6e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f72:	6011      	str	r1, [r2, #0]
  return result;
 8001f74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	fab2 f282 	clz	r2, r2
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f002 021f 	and.w	r2, r2, #31
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d099      	beq.n	8001eca <HAL_RCC_OscConfig+0x8c6>
 8001f96:	e063      	b.n	8002060 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7fe fdf0 	bl	8000b7c <HAL_GetTick>
 8001f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	e00b      	b.n	8001fba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7fe fdeb 	bl	8000b7c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e225      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
 8001fba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fe8:	601a      	str	r2, [r3, #0]
  return result;
 8001fea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d102      	bne.n	800200a <HAL_RCC_OscConfig+0xa06>
 8002004:	4b90      	ldr	r3, [pc, #576]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	e00d      	b.n	8002026 <HAL_RCC_OscConfig+0xa22>
 800200a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800200e:	2202      	movs	r2, #2
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4b89      	ldr	r3, [pc, #548]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800202a:	2102      	movs	r1, #2
 800202c:	6011      	str	r1, [r2, #0]
 800202e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	fa92 f1a2 	rbit	r1, r2
 8002038:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800203c:	6011      	str	r1, [r2, #0]
  return result;
 800203e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	fab2 f282 	clz	r2, r2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f002 021f 	and.w	r2, r2, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1a0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002060:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	4b77      	ldr	r3, [pc, #476]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	4a76      	ldr	r2, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 800206e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002072:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 81c2 	beq.w	8002404 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	4b71      	ldr	r3, [pc, #452]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	f000 819c 	beq.w	80023c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b02      	cmp	r3, #2
 8002096:	f040 8114 	bne.w	80022c2 <HAL_RCC_OscConfig+0xcbe>
 800209a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800209e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fa93 f2a3 	rbit	r2, r3
 80020ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020b2:	601a      	str	r2, [r3, #0]
  return result;
 80020b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	461a      	mov	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe fd54 	bl	8000b7c <HAL_GetTick>
 80020d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d8:	e009      	b.n	80020ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020da:	f7fe fd4f 	bl	8000b7c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e18b      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
 80020ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002106:	601a      	str	r2, [r3, #0]
  return result;
 8002108:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800210c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0xb24>
 8002122:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e01b      	b.n	8002160 <HAL_RCC_OscConfig+0xb5c>
 8002128:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800212c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002146:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002164:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002168:	6011      	str	r1, [r2, #0]
 800216a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	fa92 f1a2 	rbit	r1, r2
 8002174:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002178:	6011      	str	r1, [r2, #0]
  return result;
 800217a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f042 0220 	orr.w	r2, r2, #32
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f002 021f 	and.w	r2, r2, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d19e      	bne.n	80020da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	4925      	ldr	r1, [pc, #148]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
 80021b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021d0:	601a      	str	r2, [r3, #0]
  return result;
 80021d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	461a      	mov	r2, r3
 80021ea:	2301      	movs	r3, #1
 80021ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7fe fcc5 	bl	8000b7c <HAL_GetTick>
 80021f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f6:	e009      	b.n	800220c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f8:	f7fe fcc0 	bl	8000b7c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0fc      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
 800220c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002224:	601a      	str	r2, [r3, #0]
  return result;
 8002226:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800222a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_RCC_OscConfig+0xc48>
 8002240:	4b01      	ldr	r3, [pc, #4]	; (8002248 <HAL_RCC_OscConfig+0xc44>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	e01e      	b.n	8002284 <HAL_RCC_OscConfig+0xc80>
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800226a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_OscConfig+0xe0c>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002288:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800228c:	6011      	str	r1, [r2, #0]
 800228e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	fa92 f1a2 	rbit	r1, r2
 8002298:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800229c:	6011      	str	r1, [r2, #0]
  return result;
 800229e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	fab2 f282 	clz	r2, r2
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f002 021f 	and.w	r2, r2, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d09b      	beq.n	80021f8 <HAL_RCC_OscConfig+0xbf4>
 80022c0:	e0a0      	b.n	8002404 <HAL_RCC_OscConfig+0xe00>
 80022c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	fa93 f2a3 	rbit	r2, r3
 80022d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022da:	601a      	str	r2, [r3, #0]
  return result;
 80022dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe fc40 	bl	8000b7c <HAL_GetTick>
 80022fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e009      	b.n	8002316 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe fc3b 	bl	8000b7c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e077      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
 8002316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800231e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232e:	601a      	str	r2, [r3, #0]
  return result;
 8002330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002334:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0xd4c>
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCC_OscConfig+0xe0c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	e01b      	b.n	8002388 <HAL_RCC_OscConfig+0xd84>
 8002350:	f107 0320 	add.w	r3, r7, #32
 8002354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f107 0318 	add.w	r3, r7, #24
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_RCC_OscConfig+0xe0c>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f107 0210 	add.w	r2, r7, #16
 800238c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002390:	6011      	str	r1, [r2, #0]
 8002392:	f107 0210 	add.w	r2, r7, #16
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	fa92 f1a2 	rbit	r1, r2
 800239c:	f107 020c 	add.w	r2, r7, #12
 80023a0:	6011      	str	r1, [r2, #0]
  return result;
 80023a2:	f107 020c 	add.w	r2, r7, #12
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	fab2 f282 	clz	r2, r2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f042 0220 	orr.w	r2, r2, #32
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	f002 021f 	and.w	r2, r2, #31
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d19e      	bne.n	8002302 <HAL_RCC_OscConfig+0xcfe>
 80023c4:	e01e      	b.n	8002404 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e018      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_RCC_OscConfig+0xe0c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d108      	bne.n	8002400 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b09e      	sub	sp, #120	; 0x78
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e162      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b90      	ldr	r3, [pc, #576]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b8d      	ldr	r3, [pc, #564]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	498b      	ldr	r1, [pc, #556]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b89      	ldr	r3, [pc, #548]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e14a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	497f      	ldr	r1, [pc, #508]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80dc 	beq.w	8002640 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d13c      	bne.n	800250a <HAL_RCC_ClockConfig+0xf6>
 8002490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002494:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800249e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_ClockConfig+0xa6>
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	e00f      	b.n	80024da <HAL_RCC_ClockConfig+0xc6>
 80024ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	667b      	str	r3, [r7, #100]	; 0x64
 80024c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024cc:	663b      	str	r3, [r7, #96]	; 0x60
 80024ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024de:	65ba      	str	r2, [r7, #88]	; 0x58
 80024e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024e2:	fa92 f2a2 	rbit	r2, r2
 80024e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0220 	orr.w	r2, r2, #32
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d17b      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0f3      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d13c      	bne.n	800258c <HAL_RCC_ClockConfig+0x178>
 8002512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_RCC_ClockConfig+0x128>
 8002536:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e00f      	b.n	800255c <HAL_RCC_ClockConfig+0x148>
 800253c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
 800254a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
 8002550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002558:	4b46      	ldr	r3, [pc, #280]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002560:	63ba      	str	r2, [r7, #56]	; 0x38
 8002562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002564:	fa92 f2a2 	rbit	r2, r2
 8002568:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800256a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800256c:	fab2 f282 	clz	r2, r2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f042 0220 	orr.w	r2, r2, #32
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f002 021f 	and.w	r2, r2, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d13a      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0b2      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
 800258c:	2302      	movs	r3, #2
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x1a0>
 80025ae:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	e00d      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1bc>
 80025b4:	2302      	movs	r3, #2
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2202      	movs	r2, #2
 80025d2:	61ba      	str	r2, [r7, #24]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	617a      	str	r2, [r7, #20]
  return result;
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f042 0220 	orr.w	r2, r2, #32
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f002 021f 	and.w	r2, r2, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e079      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	491a      	ldr	r1, [pc, #104]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002610:	f7fe fab4 	bl	8000b7c <HAL_GetTick>
 8002614:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7fe fab0 	bl	8000b7c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e061      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_RCC_ClockConfig+0x260>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d214      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4906      	ldr	r1, [pc, #24]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <HAL_RCC_ClockConfig+0x25c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e040      	b.n	80026f2 <HAL_RCC_ClockConfig+0x2de>
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	491a      	ldr	r1, [pc, #104]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4912      	ldr	r1, [pc, #72]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026b6:	f000 f829 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ba:	4601      	mov	r1, r0
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCC_ClockConfig+0x2e8>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c4:	22f0      	movs	r2, #240	; 0xf0
 80026c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	fa92 f2a2 	rbit	r2, r2
 80026ce:	60fa      	str	r2, [r7, #12]
  return result;
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	fab2 f282 	clz	r2, r2
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	40d3      	lsrs	r3, r2
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x2ec>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	fa21 f303 	lsr.w	r3, r1, r3
 80026e2:	4a08      	ldr	r2, [pc, #32]	; (8002704 <HAL_RCC_ClockConfig+0x2f0>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_RCC_ClockConfig+0x2f4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fa16 	bl	8000b1c <HAL_InitTick>
  
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3778      	adds	r7, #120	; 0x78
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	08003e74 	.word	0x08003e74
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b08b      	sub	sp, #44	; 0x2c
 8002710:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	d002      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x30>
 8002736:	2b08      	cmp	r3, #8
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x36>
 800273a:	e03c      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800273e:	623b      	str	r3, [r7, #32]
      break;
 8002740:	e03c      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002748:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800274c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	fa92 f2a2 	rbit	r2, r2
 8002754:	607a      	str	r2, [r7, #4]
  return result;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	fab2 f282 	clz	r2, r2
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	40d3      	lsrs	r3, r2
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	220f      	movs	r2, #15
 8002770:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	60fa      	str	r2, [r7, #12]
  return result;
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	40d3      	lsrs	r3, r2
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	fbb2 f2f3 	udiv	r2, r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
 80027a4:	e004      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	623b      	str	r3, [r7, #32]
      break;
 80027b4:	e002      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027b8:	623b      	str	r3, [r7, #32]
      break;
 80027ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027bc:	6a3b      	ldr	r3, [r7, #32]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	372c      	adds	r7, #44	; 0x2c
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	007a1200 	.word	0x007a1200
 80027d4:	08003e8c 	.word	0x08003e8c
 80027d8:	08003e9c 	.word	0x08003e9c
 80027dc:	003d0900 	.word	0x003d0900

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027fe:	f7ff ffef 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002802:	4601      	mov	r1, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800280c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002810:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	fa92 f2a2 	rbit	r2, r2
 8002818:	603a      	str	r2, [r7, #0]
  return result;
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	fab2 f282 	clz	r2, r2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	40d3      	lsrs	r3, r2
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	08003e84 	.word	0x08003e84

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002842:	f7ff ffcd 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002846:	4601      	mov	r1, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002850:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002854:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	603a      	str	r2, [r7, #0]
  return result;
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	fab2 f282 	clz	r2, r2
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	40d3      	lsrs	r3, r2
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_RCC_GetPCLK2Freq+0x40>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	08003e84 	.word	0x08003e84

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b092      	sub	sp, #72	; 0x48
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80d4 	beq.w	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a4:	4b4e      	ldr	r3, [pc, #312]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10e      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	61d3      	str	r3, [r2, #28]
 80028bc:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	4b45      	ldr	r3, [pc, #276]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d118      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028da:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a41      	ldr	r2, [pc, #260]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e6:	f7fe f949 	bl	8000b7c <HAL_GetTick>
 80028ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	e008      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ee:	f7fe f945 	bl	8000b7c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	; 0x64
 80028fa:	d901      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e169      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002914:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8084 	beq.w	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002928:	429a      	cmp	r2, r3
 800292a:	d07c      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800292c:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	461a      	mov	r2, r3
 8002956:	2301      	movs	r3, #1
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	461a      	mov	r2, r3
 800297a:	2300      	movs	r3, #0
 800297c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002982:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d04b      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe f8f5 	bl	8000b7c <HAL_GetTick>
 8002992:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe f8f1 	bl	8000b7c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e113      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80029ac:	2302      	movs	r3, #2
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
 80029b8:	2302      	movs	r3, #2
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	61fb      	str	r3, [r7, #28]
  return result;
 80029c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d108      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029da:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	e00d      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	10908100 	.word	0x10908100
 80029ec:	2302      	movs	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	4b78      	ldr	r3, [pc, #480]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2202      	movs	r2, #2
 80029fe:	613a      	str	r2, [r7, #16]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	fa92 f2a2 	rbit	r2, r2
 8002a06:	60fa      	str	r2, [r7, #12]
  return result;
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0b7      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	496a      	ldr	r1, [pc, #424]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a65      	ldr	r2, [pc, #404]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a58:	4b60      	ldr	r3, [pc, #384]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f023 0203 	bic.w	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	495d      	ldr	r1, [pc, #372]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a76:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4956      	ldr	r1, [pc, #344]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a94:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	494e      	ldr	r1, [pc, #312]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f023 0210 	bic.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4947      	ldr	r1, [pc, #284]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ad0:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	493f      	ldr	r1, [pc, #252]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aee:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f023 0220 	bic.w	r2, r3, #32
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4938      	ldr	r1, [pc, #224]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b0c:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	4930      	ldr	r1, [pc, #192]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	4929      	ldr	r1, [pc, #164]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	4921      	ldr	r1, [pc, #132]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	491a      	ldr	r1, [pc, #104]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	4912      	ldr	r1, [pc, #72]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	490b      	ldr	r1, [pc, #44]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3748      	adds	r7, #72	; 0x48
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000

08002be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e09d      	b.n	8002d2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c02:	d009      	beq.n	8002c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
 8002c0a:	e005      	b.n	8002c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fe22 	bl	800087c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c58:	d902      	bls.n	8002c60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e002      	b.n	8002c66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c6e:	d007      	beq.n	8002c80 <HAL_SPI_Init+0xa0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	ea42 0103 	orr.w	r1, r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	f003 0204 	and.w	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cfc:	ea42 0103 	orr.w	r1, r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e040      	b.n	8002dca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fd fdd1 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2224      	movs	r2, #36	; 0x24
 8002d62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa4d 	bl	8003214 <UART_SetConfig>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e022      	b.n	8002dca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fc13 	bl	80035b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fc9a 	bl	80036fc <UART_CheckIdleState>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d113      	bne.n	8002e2c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d009      	beq.n	8002e2c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 81cd 	beq.w	80031bc <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
      }
      return;
 8002e2a:	e1c7      	b.n	80031bc <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80e3 	beq.w	8002ffa <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4ba5      	ldr	r3, [pc, #660]	; (80030d8 <HAL_UART_IRQHandler+0x304>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80d8 	beq.w	8002ffa <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_UART_IRQHandler+0xa2>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xce>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_UART_IRQHandler+0xfa>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec4:	f043 0202 	orr.w	r2, r3, #2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efa:	f043 0208 	orr.w	r2, r3, #8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d011      	beq.n	8002f32 <HAL_UART_IRQHandler+0x15e>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8141 	beq.w	80031c0 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00c      	beq.n	8002f62 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f68:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d004      	beq.n	8002f82 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d031      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fc7f 	bl	8003886 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d123      	bne.n	8002fde <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d013      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a4a      	ldr	r2, [pc, #296]	; (80030dc <HAL_UART_IRQHandler+0x308>)
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd ff34 	bl	8000e28 <HAL_DMA_Abort_IT>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d017      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd4:	e00f      	b.n	8002ff6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f906 	bl	80031e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e00b      	b.n	8002ff6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f902 	bl	80031e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e007      	b.n	8002ff6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8fe 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002ff4:	e0e4      	b.n	80031c0 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff6:	bf00      	nop
    return;
 8002ff8:	e0e2      	b.n	80031c0 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	f040 80a7 	bne.w	8003152 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80a1 	beq.w	8003152 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 809b 	beq.w	8003152 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2210      	movs	r2, #16
 8003022:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d156      	bne.n	80030e0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800303c:	893b      	ldrh	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80c0 	beq.w	80031c4 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800304a:	893a      	ldrh	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	f080 80b9 	bcs.w	80031c4 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	893a      	ldrh	r2, [r7, #8]
 8003056:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2b20      	cmp	r3, #32
 8003062:	d02a      	beq.n	80030ba <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003072:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003092:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0210 	bic.w	r2, r2, #16
 80030ae:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fe7e 	bl	8000db6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4619      	mov	r1, r3
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f894 	bl	80031fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030d4:	e076      	b.n	80031c4 <HAL_UART_IRQHandler+0x3f0>
 80030d6:	bf00      	nop
 80030d8:	04000120 	.word	0x04000120
 80030dc:	080038e5 	.word	0x080038e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d064      	beq.n	80031c8 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d061      	beq.n	80031c8 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003112:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0210 	bic.w	r2, r2, #16
 8003144:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f856 	bl	80031fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003150:	e03a      	b.n	80031c8 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00d      	beq.n	8003178 <HAL_UART_IRQHandler+0x3a4>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800316e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fbe6 	bl	8003942 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003176:	e02a      	b.n	80031ce <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01b      	beq.n	80031cc <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
    }
    return;
 800319c:	e016      	b.n	80031cc <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <HAL_UART_IRQHandler+0x3fa>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fbac 	bl	8003910 <UART_EndTransmit_IT>
    return;
 80031b8:	bf00      	nop
 80031ba:	e008      	b.n	80031ce <HAL_UART_IRQHandler+0x3fa>
      return;
 80031bc:	bf00      	nop
 80031be:	e006      	b.n	80031ce <HAL_UART_IRQHandler+0x3fa>
    return;
 80031c0:	bf00      	nop
 80031c2:	e004      	b.n	80031ce <HAL_UART_IRQHandler+0x3fa>
      return;
 80031c4:	bf00      	nop
 80031c6:	e002      	b.n	80031ce <HAL_UART_IRQHandler+0x3fa>
      return;
 80031c8:	bf00      	nop
 80031ca:	e000      	b.n	80031ce <HAL_UART_IRQHandler+0x3fa>
    return;
 80031cc:	bf00      	nop
  }

}
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003242:	f023 030c 	bic.w	r3, r3, #12
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	6979      	ldr	r1, [r7, #20]
 800324c:	430b      	orrs	r3, r1
 800324e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4aad      	ldr	r2, [pc, #692]	; (8003544 <UART_SetConfig+0x330>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d121      	bne.n	80032d8 <UART_SetConfig+0xc4>
 8003294:	4bac      	ldr	r3, [pc, #688]	; (8003548 <UART_SetConfig+0x334>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b03      	cmp	r3, #3
 800329e:	d817      	bhi.n	80032d0 <UART_SetConfig+0xbc>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x94>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032c5 	.word	0x080032c5
 80032b0:	080032cb 	.word	0x080032cb
 80032b4:	080032bf 	.word	0x080032bf
 80032b8:	2301      	movs	r3, #1
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e0b2      	b.n	8003424 <UART_SetConfig+0x210>
 80032be:	2302      	movs	r3, #2
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e0af      	b.n	8003424 <UART_SetConfig+0x210>
 80032c4:	2304      	movs	r3, #4
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e0ac      	b.n	8003424 <UART_SetConfig+0x210>
 80032ca:	2308      	movs	r3, #8
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e0a9      	b.n	8003424 <UART_SetConfig+0x210>
 80032d0:	2310      	movs	r3, #16
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	bf00      	nop
 80032d6:	e0a5      	b.n	8003424 <UART_SetConfig+0x210>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a9b      	ldr	r2, [pc, #620]	; (800354c <UART_SetConfig+0x338>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d123      	bne.n	800332a <UART_SetConfig+0x116>
 80032e2:	4b99      	ldr	r3, [pc, #612]	; (8003548 <UART_SetConfig+0x334>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ee:	d012      	beq.n	8003316 <UART_SetConfig+0x102>
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d802      	bhi.n	80032fc <UART_SetConfig+0xe8>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <UART_SetConfig+0xf6>
 80032fa:	e012      	b.n	8003322 <UART_SetConfig+0x10e>
 80032fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003300:	d00c      	beq.n	800331c <UART_SetConfig+0x108>
 8003302:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003306:	d003      	beq.n	8003310 <UART_SetConfig+0xfc>
 8003308:	e00b      	b.n	8003322 <UART_SetConfig+0x10e>
 800330a:	2300      	movs	r3, #0
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e089      	b.n	8003424 <UART_SetConfig+0x210>
 8003310:	2302      	movs	r3, #2
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e086      	b.n	8003424 <UART_SetConfig+0x210>
 8003316:	2304      	movs	r3, #4
 8003318:	77fb      	strb	r3, [r7, #31]
 800331a:	e083      	b.n	8003424 <UART_SetConfig+0x210>
 800331c:	2308      	movs	r3, #8
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e080      	b.n	8003424 <UART_SetConfig+0x210>
 8003322:	2310      	movs	r3, #16
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	bf00      	nop
 8003328:	e07c      	b.n	8003424 <UART_SetConfig+0x210>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a88      	ldr	r2, [pc, #544]	; (8003550 <UART_SetConfig+0x33c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d123      	bne.n	800337c <UART_SetConfig+0x168>
 8003334:	4b84      	ldr	r3, [pc, #528]	; (8003548 <UART_SetConfig+0x334>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800333c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003340:	d012      	beq.n	8003368 <UART_SetConfig+0x154>
 8003342:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003346:	d802      	bhi.n	800334e <UART_SetConfig+0x13a>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <UART_SetConfig+0x148>
 800334c:	e012      	b.n	8003374 <UART_SetConfig+0x160>
 800334e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003352:	d00c      	beq.n	800336e <UART_SetConfig+0x15a>
 8003354:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003358:	d003      	beq.n	8003362 <UART_SetConfig+0x14e>
 800335a:	e00b      	b.n	8003374 <UART_SetConfig+0x160>
 800335c:	2300      	movs	r3, #0
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e060      	b.n	8003424 <UART_SetConfig+0x210>
 8003362:	2302      	movs	r3, #2
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e05d      	b.n	8003424 <UART_SetConfig+0x210>
 8003368:	2304      	movs	r3, #4
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e05a      	b.n	8003424 <UART_SetConfig+0x210>
 800336e:	2308      	movs	r3, #8
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e057      	b.n	8003424 <UART_SetConfig+0x210>
 8003374:	2310      	movs	r3, #16
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	bf00      	nop
 800337a:	e053      	b.n	8003424 <UART_SetConfig+0x210>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a74      	ldr	r2, [pc, #464]	; (8003554 <UART_SetConfig+0x340>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d123      	bne.n	80033ce <UART_SetConfig+0x1ba>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <UART_SetConfig+0x334>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800338e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003392:	d012      	beq.n	80033ba <UART_SetConfig+0x1a6>
 8003394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003398:	d802      	bhi.n	80033a0 <UART_SetConfig+0x18c>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <UART_SetConfig+0x19a>
 800339e:	e012      	b.n	80033c6 <UART_SetConfig+0x1b2>
 80033a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a4:	d00c      	beq.n	80033c0 <UART_SetConfig+0x1ac>
 80033a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033aa:	d003      	beq.n	80033b4 <UART_SetConfig+0x1a0>
 80033ac:	e00b      	b.n	80033c6 <UART_SetConfig+0x1b2>
 80033ae:	2300      	movs	r3, #0
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e037      	b.n	8003424 <UART_SetConfig+0x210>
 80033b4:	2302      	movs	r3, #2
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e034      	b.n	8003424 <UART_SetConfig+0x210>
 80033ba:	2304      	movs	r3, #4
 80033bc:	77fb      	strb	r3, [r7, #31]
 80033be:	e031      	b.n	8003424 <UART_SetConfig+0x210>
 80033c0:	2308      	movs	r3, #8
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e02e      	b.n	8003424 <UART_SetConfig+0x210>
 80033c6:	2310      	movs	r3, #16
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	bf00      	nop
 80033cc:	e02a      	b.n	8003424 <UART_SetConfig+0x210>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a61      	ldr	r2, [pc, #388]	; (8003558 <UART_SetConfig+0x344>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d123      	bne.n	8003420 <UART_SetConfig+0x20c>
 80033d8:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <UART_SetConfig+0x334>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80033e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e4:	d012      	beq.n	800340c <UART_SetConfig+0x1f8>
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d802      	bhi.n	80033f2 <UART_SetConfig+0x1de>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <UART_SetConfig+0x1ec>
 80033f0:	e012      	b.n	8003418 <UART_SetConfig+0x204>
 80033f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033f6:	d00c      	beq.n	8003412 <UART_SetConfig+0x1fe>
 80033f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033fc:	d003      	beq.n	8003406 <UART_SetConfig+0x1f2>
 80033fe:	e00b      	b.n	8003418 <UART_SetConfig+0x204>
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e00e      	b.n	8003424 <UART_SetConfig+0x210>
 8003406:	2302      	movs	r3, #2
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e00b      	b.n	8003424 <UART_SetConfig+0x210>
 800340c:	2304      	movs	r3, #4
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e008      	b.n	8003424 <UART_SetConfig+0x210>
 8003412:	2308      	movs	r3, #8
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e005      	b.n	8003424 <UART_SetConfig+0x210>
 8003418:	2310      	movs	r3, #16
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	bf00      	nop
 800341e:	e001      	b.n	8003424 <UART_SetConfig+0x210>
 8003420:	2310      	movs	r3, #16
 8003422:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342c:	d15d      	bne.n	80034ea <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d828      	bhi.n	8003486 <UART_SetConfig+0x272>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0x228>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003461 	.word	0x08003461
 8003440:	08003469 	.word	0x08003469
 8003444:	08003471 	.word	0x08003471
 8003448:	08003487 	.word	0x08003487
 800344c:	08003477 	.word	0x08003477
 8003450:	08003487 	.word	0x08003487
 8003454:	08003487 	.word	0x08003487
 8003458:	08003487 	.word	0x08003487
 800345c:	0800347f 	.word	0x0800347f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003460:	f7ff f9ca 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8003464:	61b8      	str	r0, [r7, #24]
        break;
 8003466:	e013      	b.n	8003490 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7ff f9e8 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 800346c:	61b8      	str	r0, [r7, #24]
        break;
 800346e:	e00f      	b.n	8003490 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003470:	4b3a      	ldr	r3, [pc, #232]	; (800355c <UART_SetConfig+0x348>)
 8003472:	61bb      	str	r3, [r7, #24]
        break;
 8003474:	e00c      	b.n	8003490 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003476:	f7ff f949 	bl	800270c <HAL_RCC_GetSysClockFreq>
 800347a:	61b8      	str	r0, [r7, #24]
        break;
 800347c:	e008      	b.n	8003490 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003482:	61bb      	str	r3, [r7, #24]
        break;
 8003484:	e004      	b.n	8003490 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	77bb      	strb	r3, [r7, #30]
        break;
 800348e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8085 	beq.w	80035a2 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	005a      	lsls	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d916      	bls.n	80034e4 <UART_SetConfig+0x2d0>
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d212      	bcs.n	80034e4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f023 030f 	bic.w	r3, r3, #15
 80034c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	89fb      	ldrh	r3, [r7, #14]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	89fa      	ldrh	r2, [r7, #14]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	e05e      	b.n	80035a2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	77bb      	strb	r3, [r7, #30]
 80034e8:	e05b      	b.n	80035a2 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d837      	bhi.n	8003560 <UART_SetConfig+0x34c>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <UART_SetConfig+0x2e4>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	08003525 	.word	0x08003525
 8003500:	0800352d 	.word	0x0800352d
 8003504:	08003561 	.word	0x08003561
 8003508:	08003533 	.word	0x08003533
 800350c:	08003561 	.word	0x08003561
 8003510:	08003561 	.word	0x08003561
 8003514:	08003561 	.word	0x08003561
 8003518:	0800353b 	.word	0x0800353b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7ff f96c 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8003520:	61b8      	str	r0, [r7, #24]
        break;
 8003522:	e022      	b.n	800356a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7ff f98a 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003528:	61b8      	str	r0, [r7, #24]
        break;
 800352a:	e01e      	b.n	800356a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <UART_SetConfig+0x348>)
 800352e:	61bb      	str	r3, [r7, #24]
        break;
 8003530:	e01b      	b.n	800356a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003532:	f7ff f8eb 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8003536:	61b8      	str	r0, [r7, #24]
        break;
 8003538:	e017      	b.n	800356a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	61bb      	str	r3, [r7, #24]
        break;
 8003540:	e013      	b.n	800356a <UART_SetConfig+0x356>
 8003542:	bf00      	nop
 8003544:	40013800 	.word	0x40013800
 8003548:	40021000 	.word	0x40021000
 800354c:	40004400 	.word	0x40004400
 8003550:	40004800 	.word	0x40004800
 8003554:	40004c00 	.word	0x40004c00
 8003558:	40005000 	.word	0x40005000
 800355c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	77bb      	strb	r3, [r7, #30]
        break;
 8003568:	bf00      	nop
    }

    if (pclk != 0U)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d018      	beq.n	80035a2 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	085a      	lsrs	r2, r3, #1
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d908      	bls.n	800359e <UART_SetConfig+0x38a>
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003592:	d204      	bcs.n	800359e <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e001      	b.n	80035a2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035ae:	7fbb      	ldrb	r3, [r7, #30]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01a      	beq.n	80036ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b6:	d10a      	bne.n	80036ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af02      	add	r7, sp, #8
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800370c:	f7fd fa36 	bl	8000b7c <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d10e      	bne.n	800373e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f82d 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e023      	b.n	8003786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d10e      	bne.n	800376a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800374c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f817 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e00d      	b.n	8003786 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379e:	e05e      	b.n	800385e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a6:	d05a      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a8:	f7fd f9e8 	bl	8000b7c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <UART_WaitOnFlagUntilTimeout+0x30>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11b      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e043      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02c      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003812:	d124      	bne.n	800385e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800381c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800382c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e00f      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	429a      	cmp	r2, r3
 800387a:	d091      	beq.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800389c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0210 	bic.w	r2, r2, #16
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fc70 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003926:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fc4d 	bl	80031d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800395e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003962:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	b29b      	uxth	r3, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	4013      	ands	r3, r2
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800398c:	b084      	sub	sp, #16
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	f107 0014 	add.w	r0, r7, #20
 800399a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	b004      	add	sp, #16
 80039cc:	4770      	bx	lr
	...

080039d0 <__NVIC_SetPriority>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	6039      	str	r1, [r7, #0]
 80039da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	db0a      	blt.n	80039fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	490c      	ldr	r1, [pc, #48]	; (8003a1c <__NVIC_SetPriority+0x4c>)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	440b      	add	r3, r1
 80039f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039f8:	e00a      	b.n	8003a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4908      	ldr	r1, [pc, #32]	; (8003a20 <__NVIC_SetPriority+0x50>)
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	3b04      	subs	r3, #4
 8003a08:	0112      	lsls	r2, r2, #4
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	761a      	strb	r2, [r3, #24]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000e100 	.word	0xe000e100
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <SysTick_Config>:
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a34:	d301      	bcc.n	8003a3a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <SysTick_Config+0x40>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a42:	210f      	movs	r1, #15
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a48:	f7ff ffc2 	bl	80039d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <SysTick_Config+0x40>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <SysTick_Config+0x40>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <OS_Init>:
// Initialize operating system, disable interrupts
// Initialize OS controlled I/O: periodic interrupt, bus clock as fast as possible
// Initialize OS global variables
// Inputs:  none
// Outputs: none
void OS_Init(void){
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6c:	b672      	cpsid	i
  __disable_irq();
//  BSP_Clock_InitFastest();// set processor clock to fastest speed
  // perform any initializations needed
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <SetInitialStack>:

void SetInitialStack(int i){
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  tcbs[i].sp = &Stacks[i][STACKSIZE-16]; // thread stack pointer
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a8e:	4a60      	ldr	r2, [pc, #384]	; (8003c10 <SetInitialStack+0x198>)
 8003a90:	441a      	add	r2, r3
 8003a92:	4960      	ldr	r1, [pc, #384]	; (8003c14 <SetInitialStack+0x19c>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	440b      	add	r3, r1
 8003a9a:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-1] = 0x01000000;   // thumb bit
 8003a9c:	4a5c      	ldr	r2, [pc, #368]	; (8003c10 <SetInitialStack+0x198>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003aae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ab2:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-3] = 0x14141414;   // R14
 8003ab4:	4a56      	ldr	r2, [pc, #344]	; (8003c10 <SetInitialStack+0x198>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003ac6:	f04f 3214 	mov.w	r2, #336860180	; 0x14141414
 8003aca:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-4] = 0x12121212;   // R12
 8003acc:	4a50      	ldr	r2, [pc, #320]	; (8003c10 <SetInitialStack+0x198>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ade:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8003ae2:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-5] = 0x03030303;   // R3
 8003ae4:	4a4a      	ldr	r2, [pc, #296]	; (8003c10 <SetInitialStack+0x198>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003af6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8003afa:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-6] = 0x02020202;   // R2
 8003afc:	4a44      	ldr	r2, [pc, #272]	; (8003c10 <SetInitialStack+0x198>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b0e:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8003b12:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-7] = 0x01010101;   // R1
 8003b14:	4a3e      	ldr	r2, [pc, #248]	; (8003c10 <SetInitialStack+0x198>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003b26:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8003b2a:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-8] = 0x00000000;   // R0
 8003b2c:	4a38      	ldr	r2, [pc, #224]	; (8003c10 <SetInitialStack+0x198>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-9] = 0x11111111;   // R11
 8003b42:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <SetInitialStack+0x198>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003b54:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8003b58:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-10] = 0x10101010;  // R10
 8003b5a:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <SetInitialStack+0x198>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b6c:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8003b70:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-11] = 0x09090909;  // R9
 8003b72:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <SetInitialStack+0x198>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003b84:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8003b88:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-12] = 0x08080808;  // R8
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <SetInitialStack+0x198>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003b9c:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8003ba0:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-13] = 0x07070707;  // R7
 8003ba2:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <SetInitialStack+0x198>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8003bb4:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8003bb8:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-14] = 0x06060606;  // R6
 8003bba:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <SetInitialStack+0x198>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003bcc:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8003bd0:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-15] = 0x05050505;  // R5
 8003bd2:	4a0f      	ldr	r2, [pc, #60]	; (8003c10 <SetInitialStack+0x198>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003be4:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8003be8:	601a      	str	r2, [r3, #0]
  Stacks[i][STACKSIZE-16] = 0x04040404;  // R4
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <SetInitialStack+0x198>)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bfc:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000470 	.word	0x20000470
 8003c14:	20000ddc 	.word	0x20000ddc

08003c18 <OS_AddThreads>:
int OS_AddThreads(void(*thread0)(void),
                  void(*thread1)(void),
                  void(*thread2)(void),
                  void(*thread3)(void),
                  void(*thread4)(void),
                  void(*thread5)(void)){
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08c      	sub	sp, #48	; 0x30
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  // **similar to Lab 2. initialize as not blocked, not sleeping****
  void (*fThreads[NUMTHREADS])() = {
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    thread3,
    thread4,
    thread5
  };
  int32_t status;
  status = StartCritical();
 8003c3e:	f7fc fae5 	bl	800020c <StartCritical>
 8003c42:	62b8      	str	r0, [r7, #40]	; 0x28

  for (uint8_t i = 0; i < NUMTHREADS; i++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c4a:	e040      	b.n	8003cce <OS_AddThreads+0xb6>
  {
    tcbs[i].next = &tcbs[i + 1 == NUMTHREADS ? 0 : i + 1];
 8003c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	d003      	beq.n	8003c5c <OS_AddThreads+0x44>
 8003c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c58:	3301      	adds	r3, #1
 8003c5a:	e000      	b.n	8003c5e <OS_AddThreads+0x46>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4a21      	ldr	r2, [pc, #132]	; (8003cec <OS_AddThreads+0xd4>)
 8003c66:	441a      	add	r2, r3
 8003c68:	4820      	ldr	r0, [pc, #128]	; (8003cec <OS_AddThreads+0xd4>)
 8003c6a:	010b      	lsls	r3, r1, #4
 8003c6c:	4403      	add	r3, r0
 8003c6e:	3304      	adds	r3, #4
 8003c70:	601a      	str	r2, [r3, #0]
    tcbs[i].blocked = 0;
 8003c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c76:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <OS_AddThreads+0xd4>)
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    tcbs[i].sleep = 0;
 8003c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c86:	4a19      	ldr	r2, [pc, #100]	; (8003cec <OS_AddThreads+0xd4>)
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	4413      	add	r3, r2
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
    SetInitialStack(i);
 8003c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff feee 	bl	8003a78 <SetInitialStack>
    Stacks[i][STACKSIZE-2] = (int32_t)(fThreads[i]);
 8003c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8003cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4a0f      	ldr	r2, [pc, #60]	; (8003cf0 <OS_AddThreads+0xd8>)
 8003cb4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003cc2:	6018      	str	r0, [r3, #0]
  for (uint8_t i = 0; i < NUMTHREADS; i++)
 8003cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cc8:	3301      	adds	r3, #1
 8003cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d9ba      	bls.n	8003c4c <OS_AddThreads+0x34>
//   SetInitialStack(2); Stacks[2][STACKSIZE-2] = (int32_t)(thread2); // PC
//   SetInitialStack(3); Stacks[3][STACKSIZE-2] = (int32_t)(thread3); // PC
//   SetInitialStack(4); Stacks[4][STACKSIZE-2] = (int32_t)(thread4); // PC
//   SetInitialStack(5); Stacks[5][STACKSIZE-2] = (int32_t)(thread5); // PC

  RunPt = &tcbs[0];       // thread 0 will run first
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <OS_AddThreads+0xdc>)
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <OS_AddThreads+0xd4>)
 8003cda:	601a      	str	r2, [r3, #0]

  EndCritical(status);
 8003cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cde:	f7fc fa99 	bl	8000214 <EndCritical>
  
  return 1;               // successful
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3730      	adds	r7, #48	; 0x30
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000ddc 	.word	0x20000ddc
 8003cf0:	20000470 	.word	0x20000470
 8003cf4:	20000e68 	.word	0x20000e68

08003cf8 <OS_Launch>:
//******** OS_Launch ***************
// Start the scheduler, enable interrupts
// Inputs: number of clock cycles for each time slice
// Outputs: none (does not return)
// Errors: theTimeSlice must be less than 16,777,216
void OS_Launch(uint32_t theTimeSlice){
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
//  STCTRL = 0;                  // disable SysTick during setup
//  STCURRENT = 0;               // any write to current clears it
//  SYSPRI3 =(SYSPRI3&0x00FFFFFF)|0xE0000000; // priority 7
//  STRELOAD = theTimeSlice - 1; // reload value
//  STCTRL = 0x00000007;         // enable, core clock and interrupt arm
  SysTick_Config(theTimeSlice);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fe8f 	bl	8003a24 <SysTick_Config>

  StartOS();                   // start on the first task
 8003d06:	f7fc fa72 	bl	80001ee <StartOS>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <Scheduler>:
// runs every ms
void Scheduler(void){ // every time slice
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  RunPt = RunPt->next;
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <Scheduler+0x38>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <Scheduler+0x38>)
 8003d20:	6013      	str	r3, [r2, #0]

  while (RunPt->blocked || RunPt->sleep)
 8003d22:	e004      	b.n	8003d2e <Scheduler+0x1a>
  {
    RunPt = RunPt->next; // find one not sleeping and not blocked 
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <Scheduler+0x38>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <Scheduler+0x38>)
 8003d2c:	6013      	str	r3, [r2, #0]
  while (RunPt->blocked || RunPt->sleep)
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <Scheduler+0x38>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f5      	bne.n	8003d24 <Scheduler+0x10>
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <Scheduler+0x38>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <Scheduler+0x10>
  }
  
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	20000e68 	.word	0x20000e68

08003d50 <OS_Suspend>:
//******** OS_Suspend ***************
// Called by main thread to cooperatively suspend operation
// Inputs: none
// Outputs: none
// Will be run again depending on sleep/block status
void OS_Suspend(void){
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
//  STCURRENT = 0;        // any write to current clears it
//  INTCTRL = 0x04000000; // trigger SysTick
// next thread gets a full time slice
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <OS_InitSemaphore>:
// ******** OS_InitSemaphore ************
// Initialize counting semaphore
// Inputs:  pointer to a semaphore
//          initial value of semaphore
// Outputs: none
void OS_InitSemaphore(int32_t *semaPt, int32_t value){
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  *semaPt = value;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <OS_Wait>:
// Decrement semaphore and block if less than zero
// Lab2 spinlock (does not suspend while spinning)
// Lab3 block if less than zero
// Inputs:  pointer to a counting semaphore
// Outputs: none
void OS_Wait(int32_t *semaPt){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	b672      	cpsid	i
  __disable_irq();

  (*semaPt)--;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	601a      	str	r2, [r3, #0]

  if (*semaPt < 0)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da06      	bge.n	8003da6 <OS_Wait+0x2a>
  {
    RunPt->blocked = semaPt;
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <OS_Wait+0x34>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003da0:	b662      	cpsie	i
    __enable_irq();
    OS_Suspend();
 8003da2:	f7ff ffd5 	bl	8003d50 <OS_Suspend>
 8003da6:	b662      	cpsie	i
  }

  __enable_irq();
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000e68 	.word	0x20000e68

08003db4 <OS_Signal>:
// Increment semaphore
// Lab2 spinlock
// Lab3 wakeup blocked thread if appropriate
// Inputs:  pointer to a counting semaphore
// Outputs: none
void OS_Signal(int32_t *semaPt){
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dbc:	b672      	cpsid	i
  tcbType *pt;
  __disable_irq();

  (*semaPt)++;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	601a      	str	r2, [r3, #0]

  if (*semaPt <= 0)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dc0f      	bgt.n	8003df0 <OS_Signal+0x3c>
  {
    pt = RunPt->next; // search for a thread blocked on this semaphore
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <OS_Signal+0x4c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

    while (pt->blocked != semaPt)
 8003dd8:	e002      	b.n	8003de0 <OS_Signal+0x2c>
    {
      pt = pt->next;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]
    while (pt->blocked != semaPt)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d1f7      	bne.n	8003dda <OS_Signal+0x26>
    }
    
    pt->blocked = 0; // wake up this one
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003df0:	b662      	cpsie	i
  }
  
  __enable_irq();
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000e68 	.word	0x20000e68

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4e0d      	ldr	r6, [pc, #52]	; (8003e3c <__libc_init_array+0x38>)
 8003e08:	4c0d      	ldr	r4, [pc, #52]	; (8003e40 <__libc_init_array+0x3c>)
 8003e0a:	1ba4      	subs	r4, r4, r6
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	2500      	movs	r5, #0
 8003e10:	42a5      	cmp	r5, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	4e0b      	ldr	r6, [pc, #44]	; (8003e44 <__libc_init_array+0x40>)
 8003e16:	4c0c      	ldr	r4, [pc, #48]	; (8003e48 <__libc_init_array+0x44>)
 8003e18:	f000 f820 	bl	8003e5c <_init>
 8003e1c:	1ba4      	subs	r4, r4, r6
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	2500      	movs	r5, #0
 8003e22:	42a5      	cmp	r5, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e2c:	4798      	blx	r3
 8003e2e:	3501      	adds	r5, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e36:	4798      	blx	r3
 8003e38:	3501      	adds	r5, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	08003eac 	.word	0x08003eac
 8003e40:	08003eac 	.word	0x08003eac
 8003e44:	08003eac 	.word	0x08003eac
 8003e48:	08003eb0 	.word	0x08003eb0

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <_init>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr

08003e68 <_fini>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr
